{
  "question_sets": [
    {
      "id": "MUSIC_Q_SINGLE_STEP_ONE_SHOT_V01_REASONING",
      "name": "Mannheim Function Calling Benchmark: Questions w/ Single Parameters, One Step and One Shot",
      "domain": "Music",
      "date": "2024-01-15",
      "description": "Simple, single step questions designed to test reasoning capability.",
      "authors": ["Dennis Heinz", "Saman Khursheed", "Zeynep Eroglu"],
      "license": "Apache 2.0",
      "function_sets": ["MUSIC_FUNC_ONE_PARAM_SIMPLE_DESC_NO_EX_V01", "MUSIC_FUNC_ONE_PARAM_COMPLEX_DESC_NO_EX_V01"],
      "questions": [
        {
          "id": "MUSIC_SINGLE_STEP_ONE_SHOT_REA_Q1",
          "category": "Reasoning",
          "question": "I consider rating as a parameter of popularity. Can you give me the most popular album of Red Hot Chili Peppers. Return the answer in JSON format: {'album':'album_name_here'}",
          "motivation": "Evaluate the ability to make value translation capabilities of projecting popularity to ratings.",
          "target": {
            "chained": false,
            "solution_paths": [
              {
                "path_id": 1,
                "functions": ["albums_by_artist_1"],
                "parameters": [{ "artist_name": "Red Hot Chili Peppers" }]
              }
            ],
            "expected_answer": {
              "ordered_items": [],
              "answer": {
                "album": "Blood Sugar Sex Magik"
              }
            },
            "comment": null
          }
        },
        {
          "id": "MUSIC_SINGLE_STEP_ONE_SHOT_REA_Q2",
          "category": "Reasoning",
          "question": "Among the 6 longest songs, does a higher speechiness score affect if the song is explicit? Return the answer in JSON format: {'evaluation_for_6_songs':'answer_in_Yes_or_No'}",
          "motivation": "Evaluate the ability to make sense of corelation between speechiness and explicitness.",
          "target": {
            "chained": false,
            "solution_paths": [
              {
                "path_id": 1,
                "functions": ["songs_by_longest_duration"],
                "parameters": [{ "n": 6 }]
              }
            ],
            "expected_answer": {
              "ordered_items": [],
              "answer": {
                "evaluation_for_6_songs": "No"
              }
            },
            "comment": null
          }
        },
        {
          "id": "MUSIC_SINGLE_STEP_ONE_SHOT_REA_Q3",
          "category": "Reasoning",
          "question": "I am a DJ at a club and want people to party as much as possible. Therefore, I want to play songs with high danceability. Which three top 10 songs do you suggest? Return the answer in JSON format: {'songs': [song_names_here]}",
          "motivation": "Evaluate the ability to make recommendation about songs based on desired situation.",
          "target": {
            "chained": false,
            "solution_paths": [
              {
                "path_id": 1,
                "functions": ["top_streamed_songs"],
                "parameters": [{ "n": 10 }]
              }
            ],
            "expected_answer": {
              "ordered_items": [],
              "answer": {
                "songs": ["Queencard", "Seek & Destroy", "Where Are You Now"]
              }
            },
            "comment": null
          }
        }
      ]
    },
    {
      "id": "MUSIC_Q_SINGLE_STEP_ONE_SHOT_MULTI_PARAM_V01_REASONING",
      "name": "Mannheim Function Calling Benchmark: Questions w/ Multiple Parameters, Single Step and One Shot",
      "domain": "Music",
      "date": "2024-01-15",
      "description": "Simple single step questions designed to test reasoning capability with multi parameter functions.",
      "authors": ["Dennis Heinz", "Saman Khursheed", "Zeynep Eroglu"],
      "license": "Apache 2.0",
      "function_sets": ["MUSIC_FUNC_MULTI_PARAM_SIMPLE_DESC_NO_EX_V01"],
      "questions": [

        {
          "id": "MUSIC_SINGLE_STEP_ONE_SHOT_REA_Q1",
          "category": "Reasoning",
          "question": "Which of the albums released in november 2021 were released after the first half of the month? Please provide only album(s) name.Return the answer in JSON format: {'albums': [album_names_here]}",
          "motivation": "Evaluate the ability to correctly make temporal interpretation and assignment of parameter values",
          "target": {
            "chained": false,
            "solution_paths": [
              {
                "path_id": 1,
                "functions": ["filter_albums_by_date_range"],
                "parameters": [
                  {
                    "start_date": "2021-11-01",
                    "end_date": "2021-11-30"
                  }
                ]
              },
              {
                "path_id": 2,
                "functions": ["filter_albums_by_date_range"],
                "parameters": [
                  {
                    "start_date": "2021-11-16",
                    "end_date": "2021-11-30"
                  }
                ]
              }
            ],
            "expected_answer": {
              "ordered_items": [],
              "answer": {
                "albums": ["KICK ii","Bloodmoon: I","30"]
              }
            },
            "comment": null
          }
        },
        {
          "id": "MUSIC_SINGLE_STEP_ONE_SHOT_REA_Q2",
          "category": "Reasoning",
          "question": "Provide a list of albums categorized under Psychedelic Rock with a minimum rating exceeding 4.25, having more than 100 reviews and being rated by over 1000 individuals. Please include the names of these albums. Return the answer in JSON format: {'albums': [album_names_here]}",
          "motivation": "Evaluate the ability to make categorization and test the model's awareness about dataset's attributes",
          "target": {
            "chained": false,
            "solution_paths": [
              {
                "path_id": 1,
                "functions": ["high_rated_reviewed_albums"],
                "parameters": [
                  {
                    "rating_threshold": 4.25,
                    "min_ratings": 1000,
                    "review_threshold": 100
                  }
                ]
              }
            ],
            "expected_answer": {
              "ordered_items": [],
              "answer": {
                "albums": [ "Wish You Were Here","In the Court of the Crimson King"]
              }
            },
            "comment": null
          }
        },
        {
          "id": "MUSIC_SINGLE_STEP_ONE_SHOT_REA_Q3",
          "category": "Reasoning",
          "question": "Considering popularity as the number of reviews received, can you return the most popular Indie Folk album from those released in 2020, characterized as melodic and poetic. Return the answer in JSON format: {'album': 'album_name_here'}",
          "motivation": "Evaluate the ability to correctly reason value transition",
          "target": {
            "chained": false,
            "solution_paths": [
              {
                "path_id": 1,
                "functions": ["albums_by_year_genres_and_descriptors"],
                "parameters": [
                  {
                    "release_date": "2020",
                    "genres": ["Indie Folk"],
                    "descriptors": ["melodic", "poetic"]
                  }
                ]
              }
            ],
            "expected_answer": {
              "ordered_items": [],
              "answer": {
                "album": "Microphones in 2020"
              }
            },
            "comment": null
          }
        },
        {
          "id": "MUSIC_SINGLE_STEP_ONE_SHOT_REA_Q4",
          "category": "Reasoning",
          "question": "I am hosting a birthday party for my child. I prefer the danceability score to be higher than 90 to be suitable for a birthday party. Can you please recommend some latest songs which are suitable for children? Please provide only song(s) name. Return the answer in JSON format: {'songs':[nonexplicit_song_names_here]}",
          "motivation": "Evaluate the ability to correctly identify the function to be called making commonsense reasoning",
          "target": {
            "chained": false,
            "solution_paths": [
              {
                "path_id": 1,
                "functions": ["songs_by_danceability_explicitness"],
                "parameters": [
                  { "danceability_threshold": 90, "explicit": false }
                ]
              }
            ],
            "expected_answer": {
              "ordered_items": [],
              "answer": {
                "songs": ["YOU THE VIBE",
                "TRAKA",
                "DOGGY DOGGY",
                "MOLI",
                "PALETA PA TO EL MUNDO",
                "RICO FEO",
                "TEKIRIKI"]
              }
            },
            "comment": null
          }
        },
        {
          "id": "MUSIC_SINGLE_STEP_ONE_SHOT_REA_Q5",
          "category": "Reasoning",
          "question": "Can you please retrieve album(s) related to government and regimes from the ones released in 2015, ensuring they have a minimum rating exceeding 4, a review count surpassing 100, and a rating higher than 1000. Please provide only album(s) name.Return the answer in JSON format: {'album':'album_name'}",
          "motivation": "Evaluate the ability to correctly identify the albums with related genres from implicitly stated in the question",
          "target": {
            "chained": false,
            "solution_paths": [
              {
                "path_id": 1,
                "functions": [
                  "high_rated_reviewed_albums_by_date"
                ],
                "parameters": [
                  {
                    "rating_threshold": 4,
                    "min_ratings": 1000,
                    "review_threshold": 100,
                    "release_date": "2015"
                  }
                ]
              }
            ],
            "expected_answer": {
              "ordered_items": [],
              "answer": {
                "album": "To Pimp a Butterfly"
              }
            },
            "comment": null
          }
        }
 
      ]
    },

    {
      "id": "MUSIC_Q_MULTI_CALL_SEQUENTIAL_V01_REASONING",
      "name": "Mannheim Function Calling Benchmark: Questions w/ Multi Step and One Shot for Sequential Function Calling",
      "domain": "Music",
      "date": "2024-01-15",
      "description": "Simple, multi step questions designed to test the reasoning capability using sequential function calling",
      "authors": ["Dennis Heinz", "Saman Khursheed", "Zeynep Eroglu"],
      "license": "Apache 2.0",
      "function_sets": ["MUSIC_FUNC_COMPLEX_DESC_NO_EX_V2"],
      "questions": [
        {
          "id": "MUSIC_SEQ_MULTI_STEP_ONE_SHOT_REA_Q1",
          "category": "Reasoning",
          "question": "I am organizing a beach party and compiling songs with high beats. Can you get the albums of Bad Bunny and please recommend 4 songs from his most recent album which are suitable for my party. Return the answer in JSON format: {'songs': [4_song_names_with_highest_beats_here]}",
          "motivation": "Evaluate the ability to make recommendation about songs based on desired situation. ",
          "target": {
            "chained": true,
            "solution_paths": [
              {
                "path_id": 1,
                "functions": [
                  "albums_by_artist_2",
                  "songs_by_album"
                ],
                "parameters": [
                  {
                    "artist_name": "Bad Bunny"
                  },
                  {
                    "album_name": "Un verano sin ti"
                  }
                ]
              }
            ],
            "expected_answer": {
              "ordered_items": [],
              "answer": {
                "songs": [
                  "Yo No Soy Celoso",
                  "Dos Mil 16",
                  "Un Coco",
                  "Un Verano Sin Ti"
                ]
              }
            },
            "comment": null
          }
        },
        {
          "id": "MUSIC_SEQ_MULTI_STEP_ONE_SHOT_REA_Q2",
          "category": "Reasoning",
          "question": "I cannot remember the artist name of this famous song “Perfect”. Can you please find the artist and then his albums and return the one which is most popular. I consider popularity to be proportional to the number of reviews received by the albums. Return the answer in JSON format: {'album':'name_of_popular_album'}",
          "motivation": "Evaluate the ability to make value translation capabilities of projecting popularity to number of reviews.",
          "target": {
            "chained": true,
            "solution_paths": [
              {
                "path_id": 1,
                "functions": [
                  "song_info",
                  "albums_by_artist_2"
                ],
                "parameters": [
                  {
                    "song_name": "Perfect"
                  },
                  {
                    "artist_name": "Ed Sheeran"
                  }
                ]
              }
            ],
            "expected_answer": {
              "ordered_items": [],
              "answer": {
                "album": "÷ (Divide)"
              }
            },
            "comment": null
          }
        },
        {
          "id": "MUSIC_SEQ_MULTI_STEP_ONE_SHOT_REA_Q3",
          "category": "Reasoning",
          "question": "Of all the albums released in 2000, which album do you think is not suitable for children and why? Also return the songs of this album. Return the answer in JSON format: {'album': 'album_name_here', 'songs': [song_names_here]}",
          "motivation": "Evaluate the ability to make album selection based on desired situation using descriptors. ",
          "target": {
            "chained": true,
            "solution_paths": [
              {
                "path_id": 1,
                "functions": [
                  "albums_by_release_date_2",
                  "songs_by_album"
                ],
                "parameters": [
                  {
                    "release_date": "2000"
                  },
                  {
                    "album_name": "The Marshall Mathers LP"
                  }
                ]
              }
            ],
            "expected_answer": {
              "ordered_items": [],
              "answer": {
                "album": "The Marshall Mathers LP",
                "songs": [
                  "The Real Slim Shady",
                  "Stan"
                ]
              }
            },
            "comment": null
          }
        }
      ]
    },
    {
      "id": "MUSIC_Q_MULTI_CALL_PARALLEL_V01_REASONING",
      "name": "Mannheim Function Calling Benchmark: Questions w/ Multi Step and One Shot for Parallel Function Calling.",
      "domain": "Music",
      "date": "2024-01-15",
      "description": "Simple, multi step questions designed to test the reasoning capability using parallel function calling",
      "authors": ["Dennis Heinz", "Saman Khursheed", "Zeynep Eroglu"],
      "license": "Apache 2.0",
      "function_sets": ["MUSIC_FUNC_COMPLEX_DESC_NO_EX_V2"],
      "questions": [
        {
          "id": "MUSIC_PAR_MULTI_STEP_ONE_SHOT_REA_Q1",
          "category": "Reasoning",
          "question": "Which band among The Beatles, Guns n' Roses and Coldplay has the most diverse range of genres in their albums? Return the answer in JSON format: {'band_with_most_diversified_genres': 'artist_name'}",
          "motivation": "Evaluate the ability to select album based on analyzing the genres.",
          "target": {
            "chained": true,
            "solution_paths": [
              {
                "path_id": 1,
                "functions": [
                  "albums_by_artist_2",
                  "albums_by_artist_2",
                  "albums_by_artist_2"
                ],
                "parameters": [
                  {
                    "artist_name": "The Beatles"
                  },
                  {
                    "artist_name": "Guns n' Roses"
                  },
                  {
                    "artist_name": "Coldplay"
                  }
                ]
              }
            ],
            "expected_answer": {
              "ordered_items": [],
              "answer": {
                "band_with_most_diversified_genres": "The Beatles"
              }
            },
            "comment": null
          }
        },
        {
          "id": "MUSIC_PAR_MULTI_STEP_ONE_SHOT_REA_Q2",
          "category": "Reasoning",
          "question": "Do you find Adele and Miley Cyrus to be similar based on their genres? Answer with Yes or No. Return the answer in JSON format: {'Adele_genres': [Adele_genres_here], 'MileyCyrus_genres': [MileyCyrus_genres_here], 'genres_comparison': 'YesOrNo'}",
          "motivation": "Evaluate the ability to reason about similarity of artists based on analyzing their genres.",
          "target": {
            "chained": true,
            "solution_paths": [
              {
                "path_id": 1,
                "functions": [
                  "artist_info",
                  "artist_info"
                ],
                "parameters": [
                  {
                    "artist_name": "Adele"
                  },
                  {
                    "artist_name": "Miley Cyrus"
                  }
                ]
              }
            ],
            "expected_answer": {
              "ordered_items": [],
              "answer": {
                "Adele_genres": [
                  "Pop Soul",
                  "Adult Contemporary",
                  "Blue-Eyed Soul",
                  "Pop",
                  "Singer-Songwriter"
                ],
                "MileyCyrus_genres": [
                  "Pop Rock",
                  "Electropop",
                  "Dance-Pop",
                  "Teen Pop",
                  "Contemporary R&B",
                  "Pop"
                ],
                "genres_comparison": "No"
              }
            },
            "comment": null
          }
        },
        {
          "id": "MUSIC_PAR_MULTI_STEP_ONE_SHOT_REA_Q3",
          "category": "Reasoning",
          "question": "Looking at the songs of albums “Unorthodox Jukebox” and “Doo-Wops & Hooligans”, do you see any correlation between energy and bpm value? Answer with Yes or No. Return the answer in JSON format: {'correlation_comparison': 'YesOrNo'}",
          "motivation": "Evaluate the ability to make sense of corelation between energy and bpm.",
          "target": {
            "chained": true,
            "solution_paths": [
              {
                "path_id": 1,
                "functions": [
                  "songs_by_album",
                  "songs_by_album"
                ],
                "parameters": [
                  {
                    "album_name": "Unorthodox Jukebox"
                  },
                  {
                    "album_name": "Doo-Wops & Hooligans"
                  }
                ]
              }
            ],
            "expected_answer": {
              "ordered_items": [],
              "answer": {
                "correlation_comparison": "No"
              }
            },
            "comment": null
          }
        },
        {
          "id": "MUSIC_PAR_MULTI_STEP_ONE_SHOT_REA_Q4",
          "category": "Reasoning",
          "question": "Find the songs of album “1989” and “Speak Now (Taylor's Version)” and looking at the number of streams, return which album is more popular? Return the answer in JSON format: {'more_poular_album':'album_name'}",
          "motivation": "Evaluate the ability to make value translation capabilities of projecting popularity to number of streams.",
          "target": {
            "chained": true,
            "solution_paths": [
              {
                "path_id": 1,
                "functions": [
                  "songs_by_album",
                  "songs_by_album",
                  "sum_streams_given_songs",
                  "sum_streams_given_songs"
                ],
                "parameters": [
                  {
                    "album_name": "1989"
                  },
                  {
                    "album_name": "Speak Now (Taylor's Version)"
                  },
                  {
                    "songs": [
                      "Blank Space",
                      "Style",
                      "Shake It Off"
                    ]
                  },
                  {
                    "songs": [
                      "I Can See You (Taylor's Version) ",
                      "Enchanted (Taylor's Version)",
                      "Back To December (Taylor's Version)",
                      "Mine (Taylor's Version)",
                      "Better Than Revenge (Taylor's Version)"
                    ]
                  }
                ]
              },
              {
                "path_id": 2,
                "functions": ["songs_by_album", "sum_streams_given_songs","songs_by_album","sum_streams_given_songs"],
                "parameters": [
                  {
                    "album_name": "1989"
                  },
                  {
                    "songs": [
                      "Blank Space",
                      "Style",
                      "Shake It Off"
                    ]
                  },
                  {
                    "album_name": "Speak Now (Taylor's Version)"
                  },                  
                  {
                    "songs": [
                      "I Can See You (Taylor's Version) ",
                      "Enchanted (Taylor's Version)",
                      "Back To December (Taylor's Version)",
                      "Mine (Taylor's Version)",
                      "Better Than Revenge (Taylor's Version)"
                    ]
                  }
                ]
              }
            ],
            "expected_answer": {
              "ordered_items": [],
              "answer": {
                "more_poular_album": "1989"
              }
            },
            "comment": null
          }
        }
      ]
    },
    {
      "id": "TRAVEL_Q_SINGLE_STEP_ONE_SHOT_V01_REASONING",
      "name": "Mannheim Function Calling Benchmark: Questions w/ Single Parameters, One Step and One Shot",
      "domain": "Travel",
      "date": "2024-01-15",
      "description": "Simple, single step questions designed to test a subset of selection of reasoning.",
      "authors": ["Deidamea Bajri", "Serxhina Kutrolli","Stiliana Jano"],
      "license": "Apache License 2.0",
      "function_sets": ["TRAVEL_FUNC_ONE_PARAM_SIMPLE_DESC_NO_EX_V01"],
      "questions": [

        {
          "id": "TRAVEL_SINGLE_STEP_ONE_SHOT_REASON_Q1",
          "category": "Reasoning",
          "question": "I would like to stay only tonight at this airbnb: Brooklyn Home in the Heart of it All, is this possible? Return the answer in JSON format: {'number':'number_nights'}",
          "motivation": "Testing the ability of the LLM to reason the common sense implications of the user",
          "target": {
            "chained": false,
            "solution_paths": [
              {
                "path_id": 1,
                "functions": ["get_min_nights"],
                "parameters": [
                  { "listing_name": "Brooklyn Home in the Heart of it All" }
                ]
              }
            ],
            "expected_answer": {
              "ordered_items": [],
              "answer": {
                "number": 3
              }
            }
          }
        },
        {
          "id": "TRAVEL_SINGLE_STEP_ONE_SHOT_REASON_Q2",
          "category": "Reasoning",
          "question": "I would like to stay only three nights at this airbnb: Spacious 1BR Bushwick Surfers Loft!, how much should I pay for it? Return the answer in JSON format: {'price':my_price}",
          "motivation": "Testing the ability of the LLM to reason the common sense implications of the user",
          "target": {
            "chained": false,
            "solution_paths": [
              {
                "path_id": 1,
                "functions": ["get_listing_price"],
                "parameters": [
                  { "listing_name": "Spacious 1BR Bushwick Surfers Loft!" }
                ]
              }
            ],
            "expected_answer": {
              "ordered_items": [],
              "answer": {
                "price": 330
              }
            }
          }
        },
        {
          "id": "TRAVEL_SINGLE_STEP_ONE_SHOT_REASON_Q3",
          "category": "Reasoning",
          "question": "Me and my friends have in total 300 dollars and we would like to stay for 3 nights at an airbnb in New York. Can you please suggest six some places where we can stay with this budget? Return the answer in JSON format: {'airbnb':'my_airbnb'}",
          "motivation": "Testing the ability of the LLM to reason the common sense implications of the user",
          "target": {
            "chained": false,
            "solution_paths": [
              {
                "path_id": 1,
                "functions": ["get_listing_by_lower_price"],
                "parameters": [{ "price": 100 }]
              }
            ],
            "expected_answer": {
              "ordered_items": [],
              "answer": {
                "airbnb": [
                  "Amazing huge furnished room!",
                  "Sunny and spacious  1-bedroom in Brooklyn",
                  "Large Private Room in Greenpoint Williamsburg",
                  "Quiet & Spacious Brooklyn Apt for Cat-Lovers",
                  "Huge room in great area 25 minutes from Manhattan",
                  "Brooklyn Home in the Heart of it All"
                ]
              }
            }
          }
        },
        {
          "id": "TRAVEL_SINGLE_STEP_ONE_SHOT_REASON_Q4",
          "category": "Reasoning",
          "question": "Hello! I am now in New York and I would like to try some local traditional dishes, could you please recommend me like seven nice places? Return the answer in JSON format: {'restaurant':[my_restaurant]}",
          "motivation": "Testing the ability of the LLM to reason the common sense implications of the user",
          "target": {
            "chained": false,
            "solution_paths": [
              {
                "path_id": 1,
                "functions": ["get_restaurants_by_cuisine"],
                "parameters": [{ "cuisine": "American" }]
              }
            ],
            "expected_answer": {
              "ordered_items": [],
              "answer": {
                "restaurant": [
                  "SMASHBURGER",
                  "BROADHURST THEATER",
                  "MARCO'S",
                  "MILA CAFE",
                  "SMASHBURGER #1714",
                  "MUNCHINETTE",
                  "DUNKIN DONUTS"
                ]
              }
            }
          }
        },
        {
          "id": "TRAVEL_SINGLE_STEP_ONE_SHOT_REASON_Q5",
          "category": "Reasoning",
          "question": "Hello! I will share my room with two friends and we will stay at this airbnb: Amazing huge furnished room! how much should each of us pay for this per night? Return the answer in JSON format: {'price':my_price}",
          "motivation": "Testing the ability of the LLM to reason the common sense implications of the user",
          "target": {
            "chained": false,
            "solution_paths": [
              {
                "path_id": 1,
                "functions": ["get_listing_price"],
                "parameters": [
                  { "listing_name": "Amazing huge furnished room!" }
                ]
              }
            ],
            "expected_answer": {
              "ordered_items": [],
              "answer": {
                "price": 20
              }
            }
          }
        },
        {
          "id": "TRAVEL_SINGLE_STEP_ONE_SHOT_REASON_Q6",
          "category": "Reasoning",
          "question": "I have 300 dollars with me but I was planning to spend one third on accommodation in New York, do you have some recommendations for me, example ten recommendations? Return the answer in JSON format: {'airbnb':[my_airbnb]}",
          "motivation": "Testing the ability of the LLM to reason the common sense implications of the user",
          "target": {
            "chained": false,
            "solution_paths": [
              {
                "path_id": 1,
                "functions": ["get_listing_by_price"],
                "parameters": [{ "price": 100 }]
              },
              {
                "path_id": 2,
                "functions": ["get_listing_by_lower_price"],
                "parameters": [{ "price": 100 }]
              }
            ],
            "expected_answer": {
              "ordered_items": [],
              "answer": {
                "airbnb": [
                  "Amazing huge furnished room!",
                  "Sunny and spacious  1-bedroom in Brooklyn",
                  "Large Private Room in Greenpoint Williamsburg",
                  "Quiet & Spacious Brooklyn Apt for Cat-Lovers",
                  "Huge room in great area 25 minutes from Manhattan",
                  "Brooklyn Home in the Heart of it All",
                  "Large Parlor Room Landmark Home 1 block to PRATT",
                  "Room in Bushwick Bk available June",
                  "British Room @ Columbia Uni.",
                  "Spacious brand new apartment 2 bedrooms - 2bath"
                ]
              }
            }
          }
        },
        {
          "id": "TRAVEL_SINGLE_STEP_ONE_SHOT_REASON_Q7",
          "category": "Reasoning",
          "question": "Hello! I will share my room with my little child and two friends and we will stay at this airbnb: Amazing huge furnished room! how much should each of us pay for this per night? Please return at most 10 entries. Return the answer in JSON format: {'price':my_price}",
          "motivation": "Testing the ability of the LLM to reason the common sense implications of the user",
          "target": {
            "chained": false,
            "solution_paths": [
              {
                "path_id": 1,
                "functions": ["get_listing_price"],
                "parameters": [
                  { "listing_name": "Amazing huge furnished room!" }
                ]
              }
            ],
            "expected_answer": {
              "ordered_items": [],
              "answer": {
                "price": 20
              }
            }
          }
        }
      ]
    },
    {
      "id": "TRAVEL_Q_SINGLE_STEP_ONE_SHOT_MULTI_PARAM_V01_REASONING",
      "name": "Mannheim Function Calling Benchmark: Questions w/ Multiple Parameters, Single Step and One Shot",
      "domain": "Travel",
      "date": "2024-01-15",
      "description": "Single step questions designed to test a subset of selection of reasoning questions.",
      "authors": ["Deidamea Bajri", "Serxhina Kutrolli","Stiliana Jano"],
      "license": "Apache License 2.0",
      "function_sets": ["TRAVEL_FUNC_MULTI_PARAM_SIMPLE_DESC_NO_EX_V01"],
      "questions": [

        {
          "id": "TRAVEL_MULTI_STEP_ONE_SHOT_REASON_Q1",
          "category": "Reasoning",
          "question": " I have some good italian friends that have recommended a really nice italian restaurant that serves pizza in the area of Manhattan. They have left me with the zip code which would be: 10004 and the contact details: 2123616160 but I don't know how it is called, can you please help me find this good restaurant? Return the answer in JSON format: {'restaurant_name':'name', 'restaurant_location':'location'}",
          "motivation": "Testing the ability of the LLM to reason the common sense implications of the user",
          "target": {
            "chained": false,
            "solution_paths": [
              {
                "path_id": 1,
                "functions": [
                  "get_restaurant_by_zipcode_cuisine_borough_phone"
                ],
                "parameters": [
                  {
                    "zip_code": 10004,
                    "cuisine": "pizza",
                    "borough": "Manhattan",
                    "phone": "2123616160"
                  }
                ]
              }
            ],
            "expected_answer": {
              "ordered_items": [],
              "answer": {
                "restaurant_name": "PIZZA ETALIA",
                "restaurant_location": "Manhattan"
              }
            },
            "comment": "The LLM should retrieve pizza as the cuisine value, as there is no italian cuisine category in the available API dataset."
          }
        },
        {
          "id": "TRAVEL_MULTI_STEP_ONE_SHOT_REASON_Q2",
          "category": "Reasoning",
          "question": "I have some friends visiting me this week from Japan and I want to show them some traditional places of Manhattan. I know there are some places around the area with this zip code 10011 that is close to my home. I had this number of theirs: 2129248911 but I don not remember their name. Return the answer in JSON format: {'restaurant_name':'name', 'restaurant_location':'location'} ",
          "motivation": "Testing the ability of the LLM to reason the common sense implications of the user",
          "target": {
            "chained": false,
            "solution_paths": [
              {
                "path_id": 1,
                "functions": [
                  "get_restaurant_by_zipcode_cuisine_borough_phone"
                ],
                "parameters": [
                  {
                    "zip_code": 10011,
                    "cuisine": "American",
                    "borough": "Manhattan",
                    "phone": "2129248911"
                  }
                ]
              }
            ],
            "expected_answer": {
              "ordered_items": [],
              "answer": {
                "restaurant_name": "FAMOUS BAGEL BUFFET",
                "restaurant_location": "Manhattan"
              }
            },
            "comment": "The LLM should understand that the traditional places in Manhattan should be of American cuisine."
          }
        },
        {
          "id": "TRAVEL_MULTI_STEP_ONE_SHOT_REASON_Q3",
          "category": "Reasoning",
          "question": "Recently a japanese friend of mine suggested a very good restaurant  E.A.K. RAMEN around the area of Manhattan that serves sushi. He gave me its phone number: 6468632027 but I don't know where its exact location, can you please help me find it? Return the answer in JSON format: {'restaurant_info':'info', 'restaurant_location':'location', 'restaurant_name':'name'} ",
          "motivation": "Testing the ability of the LLM to reason the common sense implications of the user",
          "target": {
            "chained": false,
            "solution_paths": [
              {
                "path_id": 1,
                "functions": ["get_info_by_name_cuisine_borough_phone"],
                "parameters": [
                  {
                    "restaurant": "E.A.K. RAMEN",
                    "cuisine": "Japanese",
                    "borough": "Manhattan",
                    "phone": "6468632027"
                  }
                ]
              }
            ],
            "expected_answer": {
              "ordered_items": [],
              "answer": {
                "restaurant_info": "6 AVENUE 469 10011",
                "restaurant_location": "Manhattan",
                "restaurant_name": "E.A.K.RAMEN"
              }
            },
            "comment": "The LLM should retrieve japanese cuisine as parameter value instead of sushi, since there is no sushi cuisine category available in the API dataset. "
          }
        },
        {
          "id": "TRAVEL_MULTI_STEP_ONE_SHOT_REASON_Q4",
          "category": "Reasoning",
          "question": "Hello, I will stay with my two friends in Manhattan in a very nice shared apartment but we do not want to pay more than 100 dollars each per night. Can you please give us five recommendations? Return the answer in JSON format: {'airbnb':['my_airbnb']}",
          "motivation": "Testing the ability of the LLM to reason the common sense implications of the user",
          "target": {
            "chained": false,
            "solution_paths": [
              {
                "path_id": 1,
                "functions": [
                  "get_airbnb_by_price_min_nights_and_neighborhood_group"
                ],
                "parameters": [
                  {
                    "price": 300,
                    "min_nights": 1,
                    "neighbourhood_group": "Manhattan"
                  }
                ]
              },
              {
                "path_id": 2,
                "functions": ["get_airbnb_by_price_range_neighbourhood"],
                "parameters": [
                  {
                    "min_price": 0,
                    "max_price": 300,
                    "neighbourhood_group": "Manhattan"
                  }
                ]
              }
            ],
            "expected_answer": {
              "ordered_items": [],
              "answer": {
                "airbnb": [
                  "West Village Studio Apartment",
                  "West Village Apartment near Washington Square Park",
                  "Cozy & artsy apt in East Village - 2 bedrooms",
                  "British Room @ Columbia Uni.",
                  "Spacious One-bedroom Home in Columbia U"
                ]
              }
            },
            "comment": "The LLM should understand that the total amount that can be paid for an airbnb per night is 200 dollars as each of the people that we be staying there can pay 100 each per night."
          }
        },
        {
          "id": "TRAVEL_MULTI_STEP_ONE_SHOT_REASON_Q5",
          "category": "Reasoning",
          "question": " Hello, I am planning to stay for a week with my friends in Queens and we would like to split the bill between us. A total of 700 dollars would suit us. Can you help us find five good places? Return the answer in JSON format: {'airbnb':['my_airbnb']}",
          "motivation": "Testing the ability of the LLM to reason the common sense implications of the user",
          "target": {
            "chained": false,
            "solution_paths": [
              {
                "path_id": 1,
                "functions": [
                  "get_airbnb_by_price_min_nights_and_neighborhood_group"
                ],
                "parameters": [
                  {
                    "price": 100,
                    "min_nights": 7,
                    "neighbourhood_group": "Queens"
                  }
                ]
              }
            ],
            "expected_answer": {
              "ordered_items": [],
              "answer": {
                "airbnb": [
                  "Amazing huge furnished room!",
                  "Sunny and spacious  1-bedroom in Brooklyn",
                  "Large Private Room in Greenpoint Williamsburg",
                  "Huge room in great area 25 minutes from Manhattan",
                  "Brooklyn Home in the Heart of it All"
                ]
              }
            },
            "comment": "The LLM should understand that the 700 dollar budget is for the whole week of the stay, and split that amount for the 7 days. Therefore, the price parameter would be 100 dollars per night."
          }
        },
        {
          "id": "TRAVEL_MULTI_STEP_ONE_SHOT_REASON_Q6",
          "category": "Reasoning",
          "question": "I want to stay at a good private room close to some friends of mine in Queens, the thing is that I want for it to be lastly reviewed four years ago in 14 December, can you do that for me? Return the answer in JSON format:{'airbnb':['my_airbnb']}",
          "motivation": "Testing the ability of the LLM to reason the common sense implications of the user",
          "target": {
            "chained": false,
            "solution_paths": [
              {
                "path_id": 1,
                "functions": [
                  "get_airbnb_by_neighbourhood_group_room_type_date"
                ],
                "parameters": [
                  {
                    "room_type": "Private room",
                    "last_review_date": "14-12-19",
                    "neighbourhood_group": "Queens"
                  }
                ]
              }
            ],
            "expected_answer": {
              "ordered_items": [],
              "answer": {
                "airbnb": [
                  "There are no available airbnbs in that neighbourhood with that room type and review date"
                ]
              }
            },
            "comment": "The LLM, depending on the model that is being used, may retrieve 2019 as the year of the last review. If the year 2019 is retrieved, then no answer is given."
          }
        }
 
      ]
    },

    {
      "id": "TRAVEL_Q_MULTI_CALL_SEQUENTIAL_V01_REASONING",
      "name": "Mannheim Function Calling Benchmark: Questions w/ Multiple Calls and One Shot",
      "domain": "Travel",
      "date": "2024-01-15",
      "description": "Multi step questions designed to test a subset of selection of reasoning questions.",
      "authors": ["Deidamea Bajri", "Serxhina Kutrolli","Stiliana Jano"],
      "license": "Apache License 2.0",
      "function_sets": ["TRAVEL_FUNC_MULTI_CALL_SEQUENTIAL_SIMPLE_DESC_NO_EX_V01"],
      "questions": [
        {
          "id": "TRAVEL_MULTI_CALL_SEQUENTIAL_REAS_Q1",
          "category": "Reasoning",
          "question": "I will travel with my little baby from California to Canada tomorrow, but I will stop to have a break with an intended overnight stop in Brooklyn and I want to find a place to stay there with her. I want to find a place that costs ten bucks per single adult. Really close to the place we will be staying, I would like to find a restaurant. Please, help me find good suggestions. Return the answer in JSON format: {'restaurants_nearby':[my_restaurant]}",
          "motivation": "Evaluate the ability of LLM to reason the time and cost constraint requested by the user. Assess GPT's reasoning ability in determining the sequence of three functions to reason targets according to geographical proximity",
          "target": {
            "chained": true,
            "solution_paths": [
              {
                "path_id": 1,
                "functions": [
                  "get_airbnb_by_price_min_nights_and_neighborhood_group",
                  "get_long_lat_by_airbnb",
                  "get_restaurant_by_airbnb_closeness"
                ],
                "parameters": [
                  {
                    "price": 10,
                    "min_nights": 1,
                    "neighbourhood_group": "Brooklyn"
                  },
                  { "listing": "Room with a view" },
                  { "latitude": 40.70959, "longitude": -73.95693 }
                ]
              }
            ],
            "expected_answer": {
              "ordered_items": [],
              "answer": {
                "restaurants_nearby": [
                  "DAR 525",
                  "FETTE SAU",
                  "GUSTO LATINO CAFE REST 1",
                  "BLANK STREET SPRINGBORN",
                  "ROKA MODERN MEDITERRANEAN",
                  "SUZUME"   
                ]
              }
            },
            "comment": "GPT should comprehend the user request of 1 night stay and that the cost will be for a single adult, disregarding the baby which has no cost."
          }
        },
        {
          "id": "TRAVEL_MULTI_CALL_SEQUENTIAL_REAS_Q2",
          "category": "Reasoning",
          "question": "I am aware that the restaurants get rated by the customers, from 1 to 5 stars, here in New York. As I will be with some very important people at a conference in Manhattan. I am seeking recommendations for the highest-rated establishments close to the conference room scheduled for tomorrow. Your insights will be helpful. Return the answer in JSON format: {'restaurant':'my_restaurant'}",
          "motivation": "Evaluate the ability of LLM to reason the selection of a list of elements according to defined user criteria (string and integer matching) and parameter dependency.",
          "target": {
            "chained": true,
            "solution_paths": [
              {
                "path_id": 1,
                "functions": [
                  "get_restaurants_by_ratings",
                  "get_neighborhood_by_rest_specification"
                ],
                "parameters": [
                  { "rating": 5 },
                  {
                    "restaurants": "Cafe Habana, Anjappar Chettinad, Bukhara Grill,Shake Shack",
                    "neigborhood": "Manhattan"
                  }
                ]
              }
            ],
            "expected_answer": {
              "ordered_items": [],
              "answer": {
                "restaurant": "SHAKE SHACK"
              }
            },
            "comment": "GPT should reason that the highest-rated establishments refer to 5-stars restaurants and output a list located in Manhattan, as requested by the user in this case."
          }
        },
        {
          "id": "TRAVEL_MULTI_CALL_SEQUENTIAL_REAS_Q3",
          "category": "Reasoning",
          "question": "Hello, I am currently in India and tomorrow morning I will be flying to New York. Some native friends there suggested me a very good traditional restaurant and they sent me the address details. This restaurant is located in New York, near the borough, Manhattan, and they also provided me with the zipcode,10010, and contact details so I could reserve a place. This is their phone number:2124902100.Considering the location of this recommended restaurant, could you please recommend some good places in close proximity to stay? Return the answer in JSON format: {'airbnbs': [my_airbnb]}",
          "motivation": "Evaluate the ability of LLM to reason the parameter selection according to the details provided by the user and perform string matching. Evaluate its ability on performing a chain-of-thought process to the calculation of the geographical proximity and mapping to targets.",
          "target": {
            "chained": true,
            "solution_paths": [
              {
                "path_id": 1,
                "functions": [
                  "get_restaurant_long_lat_by_zipcode_cuisine_borough_phone",
                  "get_airbnb_by_lat_long"
                ],
                "parameters": [
                  {
                    "zip_code": 10010,
                    "cuisine": "Indian",
                    "borough": "Manhattan",
                    "phone": "2124902100"
                  },
                  { "latitude": 40.74262626, "longitude": -73.99009391 }
                ]
              }
            ],
            "expected_answer": {
              "ordered_items": [],
              "answer": {
                "airbnbs": [
                  "West Village Studio Apartment",
                  "West Village Apartment near Washington Square Park",
                  "Cozy & artsy apt in East Village - 2 bedrooms",
                  "Spacious Bright 1 Bedroom East Village Apartment",
                  "Soho loft with everything",
                  "Large Private Room in Greenpoint Williamsburg"
                ]
              }
            },
            "comment": "GPT should reason that the cuisine is Indian, refering to the previous geographical location of the user and output the airbnbs near that specific restaurant."
          }
        }, 
        {
          "id": "TRAVEL_MULTI_CALL_SEQUENTIAL_REAS_Q4",
          "category": "Reasoning",
          "question": "As a German tourist exploring New York, I've received a delightful restaurant recommendation from a local friend. This restaurant, renowned for its Mediterranean offerings, is strategically situated in the same borough as the iconic Statue of Liberty. My friend generously provided the zip code,10025 and contact details,2126663744 for reservations tonight. In consideration of my weariness and the late-night timing, could you assist me in discovering accommodations close to that location. Return the answer in JSON format: {'airbnbs': [my_airbnb]}",
          "motivation": "Testing the ability of GPT to recall targets according to previous knowledge. Evaluating the ability to calculate geographical proximity and mapping to targets.",
          "target": {
            "chained": true,
            "solution_paths": [
              {
                "path_id": 1,
                "functions": [
                  "get_restaurant_long_lat_by_zipcode_cuisine_borough_phone",
                  "get_airbnb_by_lat_long"
                ],
                "parameters": [
                  {
                    "zip_code": 10025,
                    "cuisine": "Mediterranean",
                    "borough": "Manhattan",
                    "phone": "2126663744"
                  },
                  { "latitude": 40.80522011, "longitude": -73.96223102 }
                ]
              }
            ],
            "expected_answer": {
              "ordered_items": [],
              "answer": {
                "airbnbs": [
                  "Charming 1br in Morningside Heights"
                ]
              }
            },
            "comment": "Initial evaluation to measure GPT in reasoning the borough of restaurant using a well-known reference point: Statue of Liberty.Test GPT's understanding of calling two dependent functions to find nearby Airbnbs based on specified details such as cuisine, borough, and phone number."
          }
        },
        {
          "id": "TRAVEL_MULTI_CALL_SEQUENTIAL_REAS_Q5",
          "category": "Reasoning",
          "question": " My native friends have shared a concern about the cleanliness and popularity of places to stay in the Brooklyn. Despite this, I find myself obligated to attend a conference there with my young child, and staying together is a necessity. Could you kindly recommend the most popular and frequently visited Airbnb options in the area? Additionally, as I won't have a car, I'd appreciate suggestions for good eateries that cater to families with children. Return the answer in JSON format: {'restaurants': [my_restaurant]}",
          "motivation": "Evaluate the ability of LLM to reason numerical representations of string-like context. Assess GPT's reasoning ability in determining the sequence of three functions as a chain-of-thought in order to finally reason targets according to geographical proximity.",
          "target": {
            "chained": true,
            "solution_paths": [
              {
                "path_id": 1,
                "functions": [
                  "get_airbnb_with_max_reviews",
                  "get_long_lat_by_airbnb",
                  "get_restaurant_by_airbnb_closeness"
                ],
                "parameters": [
                  {
                    "popularity": 1,
                    "neighbourhood_group": "Brooklyn",
                    "room_type": "Shared Room"
                  },
                  { "listing": "A Couch In East Williamsburg Near Train." },
                  { "latitude": 40.70472, "longitude": -73.93784 }
                ]
              }
            ],
            "expected_answer": {
              "ordered_items": [],
              "answer": {
                "restaurants": [
                  "MARCO'S",
                  "MAKAVELY PIZZA",
                  "YUMMY YUMMY CHINESE"
                ]
              }
            },
            "comment": "GPT should understand that the most popular airbnb corresponds to the popularity parameter value being 1 and that the user is requesting a shared room since he is with child and would require some bigger space."
          }
        },
        {
          "id": "TRAVEL_MULTI_CALL_SEQUENTIAL_REAS_Q6",
          "category": "Reasoning",
          "question": " In an unexpected turn of events, my flight in the Brooklyn area has been canceled, and the next available flight is scheduled for tomorrow morning. Facing this predicament, I'm on the lookout for budget-friendly accommodation, aiming for an exceptionally low cost, around $10. Could you assist me in identifying a suitable Airbnb and provide details regarding its location. Return the answer in JSON format: {'street': [street_of_my_airbnb]}",
          "motivation": "Evaluate the ability of LLM to reason numerical representations of string-like context for time constraints. Assess GPT's reasoning ability in determining the sequence of three functions as a chain-of-thought in order to finally reason targets according to geographical proximity.",
          "target": {
            "chained": true,
            "solution_paths": [
              {
                "path_id": 1,
                "functions": [
                  "get_airbnb_by_price_min_nights_and_neighborhood_group",
                  "get_long_lat_by_airbnb",
                  "get_airbnb_address_by_lat_long"
                ],
                "parameters": [
                  {
                    "price": 10,
                    "min_nights": 1,
                    "neighbourhood_group": "Brooklyn"
                  },
                  { "listing": "Room with a view" },
                  { "latitude": 40.70959, "longitude": -73.95693 }
                ]
              }
            ],
            "expected_answer": {
              "ordered_items": [],
              "answer": {
                "street": "COLUMBIA STREET"
              }
            },
            "comment": "GPT should reason that the user's flight cancelation means that the user should stay a night at an airbnb with the requested criteria."
          }
        }
      ]
    },
    {
      "id": "TRAVEL_Q_MULTI_CALL_PARALLEL_V01_REASONING",
      "name": "Mannheim Function Calling Benchmark: Questions w/ Multiple Calls and One Shot",
      "domain": "Travel",
      "date": "2024-01-15",
      "description": "Multi step questions designed to test a subset of selection of reasoning questions.",
      "authors": ["Deidamea Bajri", "Serxhina Kutrolli","Stiliana Jano"],
      "license": "Apache License 2.0",
      "function_sets": ["TRAVEL_FUNC_MULTI_CALL_PARALLEL_SIMPLE_DESC_NO_EX_V01"],
      "questions": [
        {
          "id": "TRAVEL_MULTI_CALL_PARALLEL_REAS_Q1",
          "category": "Reasoning",
          "question": "Hello, someone told me that the Blue Ribbon Fried Chicken restaurant in New York has very good food options. Currently, I am on an exam period and I haven't much free time to go there. Thus, I would rather order the food online. Do you have any available information on the average total waiting time to order some food online in this restaurant? Return the answer in JSON format: {'total_waiting_time_blue_ribbon_fried_chicken': total_time_for_delivery_and_prep} ",
          "motivation": "Evaluate LLM's ability to call multiple functions simultaneously. Assess its reasoning ability to understand the task requested by the user requires two concurrent function calls to perform the final calculation.",
          "target": {
            "chained": true,
            "solution_paths": [
              {
                "path_id": 1,
                "functions": [
                  "get_avg_delivery_time_by_restaurant_name",
                  "get_avg_prep_time_by_restaurant_name"
                ],
                "parameters": [
                  { "restaurant_name": "Blue Ribbon Fried Chicken" },
                  { "restaurant_name": "Blue Ribbon Fried Chicken" }
                ]
              }
            ],
            "expected_answer": {
              "ordered_items": [],
              "answer": {
                "total_waiting_time_blue_ribbon_fried_chicken": 51.343743
              }
            },
            "comment": "Test the model's capacity to simultaneously provide the average delivery time and average food preparation time, then calculate their sum."
          }
        },
        {
          "id": "TRAVEL_MULTI_CALL_PARALLEL_REAS_Q2",
          "category": "Reasoning",
          "question": "I have limited time available today, only 25 minutes, and I would like to know in which restaurant I can eat the fastest, that prepares my food for the time I have available. The two restaurants that I have as options are: Hangawi and Tamarind TriBeCa. Return the answer in JSON format: {'restaurant': 'my_restaurant'} ",
          "motivation": "Evaluate LLM's ability to call multiple functions simultaneously. Assess its reasoning ability to understand the task requested by the user requires two concurrent function calls to perform the final calculation.",
          "target": {
            "chained": true,
            "solution_paths": [
              {
                "path_id": 1,
                "functions": [
                  "get_avg_prep_time_by_restaurant_name",
                  "get_avg_prep_time_by_restaurant_name"
                ],
                "parameters": [
                  { "restaurant_name": "Hangawi" },
                  { "restaurant_name": "Tamarind TriBeCa" }
                ]
              }
            ],
            "expected_answer": {
              "ordered_items": [],
              "answer": {
                "restaurant": "Hangawi"
              }
            },
            "comment": "Evaluate the ability of LLM to reason the selection of two functions, then perform a comparison between the two values and finally select the restaurant with the minimum average prep time."
          }
        },
        {
          "id": "TRAVEL_MULTI_CALL_PARALLEL_REAS_Q3",
          "category": "Reasoning",
          "question": "I was considering to go tomorrow in a very nice place to eat with a group of friends from Brooklyn called Shake Shack. However, as this restaurant is located in Manhattan I assume that it might be expensive. I would really appreciate it if you could provide me with a general idea of the prices in this restaurant. Can you also show me some information about customer satisfaction, or if this restaurant has some good reviews about the food.  Return the answer in JSON format: {'Shacke_Shack_cost': the_cost_shake, 'Shacke_Shack_rating': the_rating_shake} ",
          "motivation": "Evaluate LLM's ability to call multiple functions simultaneously. Assess its reasoning ability to understand the task requested by the user requires two concurrent function calls to provide the final answer.",
          "target": {
            "chained": true,
            "solution_paths": [
              {
                "path_id": 1,
                "functions": [
                  "get_avg_costs_by_restaurant_name",
                  "get_rating_by_restaurant_name"
                ],
                "parameters": [
                  { "restaurant_name": "Shake Shack" },
                  { "restaurant_name": "Shake Shack" }
                ]
              }
            ],
            "expected_answer": {
              "ordered_items": [],
              "answer": {
                "Shacke_Shack_cost": 16.34,
                "Shacke_Shack_rating": 4.96
              }
            },
            "comment": "GPT should understand that the user is requesting both the average cost of the restaurant and the rating as part of its answer. "
          }
        },
        {
          "id": "TRAVEL_MULTI_CALL_PARALLEL_REAS_Q4",
          "category": "Reasoning",
          "question": "I do not have much time available and I need to leave my house quickly, could you please tell me how quick will the bikers arrive at my house and give me my food between The Meatball Shop and Lucky's Famous Burgers? Return the answer in JSON format: {'The_Meatball_Shop_time': the_delivery_time_meatball_shop, 'The_Luckys_Famous_Burgers_time': the_delivery_time_lucky_famous_burgers}",
          "motivation": "Evaluate LLM's ability to call multiple functions simultaneously. Assess its reasoning ability to understand the task requested by the user requires two concurrent function calls to provide the final answer.",
          "target": {
            "chained": true,
            "solution_paths": [
              {
                "path_id": 1,
                "functions": [
                  "get_avg_delivery_time_by_restaurant_name",
                  "get_avg_delivery_time_by_restaurant_name"
                ],
                "parameters": [
                  { "restaurant_name": "The Meatball Shop" },
                  { "restaurant_name": "Lucky's Famous Burgers" }
                ]
              }
            ],
            "expected_answer": {
              "ordered_items": [],
              "answer": {
                "The_Meatball_Shop_time": 24.242424242424242,
                "The_Luckys_Famous_Burgers_time": 24.333333333333332
              }
            },
            "comment": "GPT should understand that the user is requesting two average delivery times between two restaurants and output them both as part of its answer."
          }
        },
        {
          "id": "TRAVEL_MULTI_CALL_PARALLEL_REAS_Q5",
          "category": "Reasoning",
          "question": "Could you please help me find some very good options to have a pizza date with a view of the Statue of Liberty with my partner? Additionally, we haven't found any good place to stay yet, but a friend suggested me to go to the Cozy 2 Bedroom in New York. However, I don't know in which part of the city is this place located. Could you help me with this also? Return the answer in JSON format: {'restaurants_close_Statue_of_Liberty': [restaurants_closeby], 'the_neighborhood_group_of_Cozy2_Bedroom': the_neigh_group_of_cozy2bedroom}",
          "motivation": "Evaluate LLM's ability to call multiple functions simultaneously. Assess its reasoning ability to understand the task requested by the user requires two concurrent function calls to provide the final answer.",
          "target": {
            "chained": true,
            "solution_paths": [
              {
                "path_id": 1,
                "functions": [
                  "get_restaurant_by_cuisine_borough",
                  "get_neighbourhood_group"
                ],
                "parameters": [
                  { "cuisine": "Pizza", "borough": "Manhattan" },
                  { "name": "Cozy 2 Bedroom" }
                ]
              }
            ],
            "expected_answer": {
              "ordered_items": [],
              "answer": {
                "restaurants_close_Statue_of_Liberty": [
                  "MAKAVELY PIZZA",
                  "BEN'S PIZZA",
                  "AVE D PIZZERIA",
                  "DOMINO'S PIZZA #3680",
                  "DON PEPI PIZZA",
                  "LITTLE ITALY PIZZA",
                  "FREEHOLD IN THE PARK",
                  "JUMBO PIZZA",
                  "FAMOUS CALABRIA PIZZERIA",
                  "JOE'S PIZZA",
                  "FIORENTINA RESTAURANT",
                  "PIZZA ETALIA",
                  "PRINCE ST PIZZA",
                  "FAMOUS AMADEUS PIZZA",
                  "99 CENT TASTY PIZZA",
                  "CHAMPION PIZZA",
                  "TWO BOOTS UPPER WEST SIDE",
                  "DOMINO'S",
                  "SLICE PIZZA",
                  "FIORENTINA RESTAURANT"
                ],
                "the_neighborhood_group_of_Cozy2_Bedroom": "Manhattan"
              }
            },
            "comment": "GPT should understand that the user is making two requests regarding the restaurants by cuisine and borough specification and the borough of a given airbnb"
          }
        }
      ]
    } 
  ],



  "function_sets": [
    {
      "id": "TRAVEL_FUNC_ONE_PARAM_SIMPLE_DESC_NO_EX_V01",
      "name": "Functions for Travel Use Case with simple function descriptions and no examples",
      "domain": "Travel",
      "categories": [
        "All Parameters",
        "Without Examples",
        "Simple Description"
      ],
      "num_functions": 14,
      "functions": [
        {
          "name": "get_host_name",
          "description": "Provide the host name for the AirbnB listing",
          "parameters": {
              "type": "object",
              "properties": {
                  "listing_name": {
                      "type": "string",
                      "description": "The name of the airbnb listing, e.g. Brooklyn Home in the Heart of it All"
                  }
              },
              "required": ["listing_name"]
          }
        },
        {
          "name": "get_min_nights",
          "description": "Provide the number of nights required to stay for an airbnb",
          "parameters": {
              "type": "object",
              "properties": {
                  "listing_name": {
                      "type": "string",
                      "description": "The name of the airbnb listing, e.g. Brooklyn Home in the Heart of it All"
                  }
              },
              "required": ["listing_name"]
          }
        },
        {
          "name": "get_nr_of_reviews",
          "description": "Provide the number of reviews for an airbnb",
          "parameters": {
              "type": "object",
              "properties": {
                  "listing_name": {
                      "type": "string",
                      "description": "The name of the airbnb listing, e.g. Brooklyn Home in the Heart of it All"
                  }
              },
              "required": ["listing_name"]
          }
        },  
        {
          "name": "get_listing_price",
          "description": "Provide the price of an airbnb",
          "parameters": {
              "type": "object",
              "properties": {
                  "listing_name": {
                      "type": "string",
                      "description": "The name of the airbnb listing, e.g. Brooklyn Home in the Heart of it All"
                  }
              },
              "required": ["listing_name"]
          }
        },
        {
          "name": "get_listing_by_neighbourhood_group",
          "description": "Get the airbnbs for a specific neighbourhood group",
          "parameters": {
              "type": "object",
              "properties": {
                  "neighbourhood_group": {
                      "type": "string",
                      "description": "The name of the neighbourhood group, e.g. Brooklyn"
                  }
              },
              "required": ["neighbourhood_group"]
          }
        },
        {
          "name": "get_listings_by_review_date",
          "description": "Get the listings for a specific review date in the format DD-MM-YY",
          "parameters": {
              "type": "object",
              "properties": {
                  "last_review_date": {
                      "type": "string",
                      "description": "The date of the last review, e.g. 12-05-19"
                  }
              },
              "required": ["last_review_date"]
          }
        },
        {
          "name": "get_listings_by_min_nights",
          "description": "Get the listings for a specific number of minimum nights to stay at an airbnb",
          "parameters": {
              "type": "object",
              "properties": {
                  "minimum_nights": {
                      "type": "string",
                      "description": "The number of minimum nights, e.g. 3"
                  }
              },
              "required": ["minimum_nights"]
          }
        },  
        {
          "name": "get_frequent_listings",
          "description": "Get the frequent airbnbs",
          "parameters": {
              "type": "object",
              "properties": {
                  "nr_of_listings": {
                      "type": "integer",
                      "description": "The number of listings, e.g. 3"
                  }
              },
              "required": ["nr_of_listings"]
          }
        },    
        {
          "name": "get_listing_by_price",
          "description": "Get the airbnbs for a specific price in US dollars currency",
          "parameters": {
              "type": "object",
              "properties": {
                  "price": {
                      "type": "integer",
                      "description": "The price of an airbnb per night, e.g. 90 dollars"
                  }
              },
              "required": ["price"]
          }
        },
        {
          "name": "get_listing_by_lower_price",
          "description": "Get the airbnbs for a price equal or less to the price requested in US dollars",
          "parameters": {
              "type": "object",
              "properties": {
                  "price": {
                      "type": "integer",
                      "description": "The price of an airbnb per night, e.g. 90 dollars"
                  }
              },
              "required": ["price"]
          }
        },
        {
          "name": "get_neighbourhood_group",
          "description": "Get the neighbourhood group of a specific airbnb",
          "parameters": {
              "type": "object",
              "properties": {
                  "name": {
                      "type": "string",
                      "description": "The name of the airbnb, e.g. Brooklyn Home in the Heart of it All"
                  }
              },
              "required": ["name"]
          }
        },
        {
          "name": "get_restaurants_by_cuisine",
          "description": "For a specific cuisine category, get the respective restaurants",
          "parameters": {
              "type": "object",
              "properties": {
                  "cuisine": {
                      "type": "string",
                      "description": "The cuisine type, e.g. Japanese"
                  }
              },
              "required": ["cuisine"]
          }
        },
        {
          "name": "get_borough_location",
          "description": "For a specific restaurant, get the borough location",
          "parameters": {
              "type": "object",
              "properties": {
                  "restaurant": {
                      "type": "string",
                      "description": "The restaurant name, e.g. Junoon"
                  }
              },
              "required": ["restaurant"]
          }
        },
        {
          "name": "get_cuisine",
          "description": "For a specific restaurant, get the cuisine",
          "parameters": {
              "type": "object",
              "properties": {
                  "restaurant": {
                      "type": "string",
                      "description": "The restaurant name, e.g. Junoon"
                  }
              },
              "required": ["restaurant"]
          }
        },
        {
          "name": "get_listing_by_room_type",
          "description": "Get the airbnbs for a specific room type",
          "parameters": {
              "type": "object",
              "properties": {
                  "room_type": {
                      "type": "string",
                      "description": "The room type, e.g. Entire home apt"
                  }
              },
              "required": ["room_type"]
          }
        }          

      ]
    },
    {
      "id": "TRAVEL_FUNC_ONE_PARAM_COMPLEX_DESC_NO_EX_V01",
      "name": "Functions for Travel Use Case with simple function descriptions and no examples",
      "domain": "Travel",
      "categories": [
        "All Parameters",
        "Without Examples",
        "Complex Description"
      ],
      "num_functions": 14,
      "functions": [
        {
          "name": "get_host_name",
          "description": "Provide the name of the Airbnb’s owner.",
          "parameters": {
              "type": "object",
              "properties": {
                  "listing_name": {
                      "type": "string",
                      "description": "The name of the airbnb listing, e.g. Brooklyn Home in the Heart of it All"
                  }
              },
              "required": ["listing_name"]
          }
        },
        {
          "name": "get_min_nights",
          "description": "Provide the minimum duration of stay for the Airbnb reservation.",
          "parameters": {
              "type": "object",
              "properties": {
                  "listing_name": {
                      "type": "string",
                      "description": "The name of the airbnb listing, e.g. Brooklyn Home in the Heart of it All"
                  }
              },
              "required": ["listing_name"]
          }
        },
        {
          "name": "get_nr_of_reviews",
          "description": "Provide the count of guest evaluations for the Airbnb listing.",
          "parameters": {
              "type": "object",
              "properties": {
                  "listing_name": {
                      "type": "string",
                      "description": "The name of the airbnb listing, e.g. Brooklyn Home in the Heart of it All"
                  }
              },
              "required": ["listing_name"]
          }
        },  
        {
          "name": "get_listing_price",
          "description": "Provide the rental cost for the Airbnb accommodation in US dollars.",
          "parameters": {
              "type": "object",
              "properties": {
                  "listing_name": {
                      "type": "string",
                      "description": "The name of the airbnb listing, e.g. Brooklyn Home in the Heart of it All"
                  }
              },
              "required": ["listing_name"]
          }
        },
        {
          "name": "get_listing_by_neighbourhood_group",
          "description": "Get the listings of Airbnb properties within a designated district area.",
          "parameters": {
              "type": "object",
              "properties": {
                  "neighbourhood_group": {
                      "type": "string",
                      "description": "The name of the neighbourhood group, e.g. Brooklyn"
                  }
              },
              "required": ["neighbourhood_group"]
          }
        },
        {
          "name": "get_listings_by_review_date",
          "description": "Get the Airbnb properties associated with a particular date of feedback in the date format DD-MM-YY.",
          "parameters": {
              "type": "object",
              "properties": {
                  "last_review_date": {
                      "type": "string",
                      "description": "The date of the last review, e.g. 12-05-19"
                  }
              },
              "required": ["last_review_date"]
          }
        },
        {
          "name": "get_listings_by_min_nights",
          "description": "Get the Airbnb offerings that require a set minimum number of nights for booking.",
          "parameters": {
              "type": "object",
              "properties": {
                  "minimum_nights": {
                      "type": "string",
                      "description": "The number of minimum nights, e.g. 3"
                  }
              },
              "required": ["minimum_nights"]
          }
        },  
        {
          "name": "get_frequent_listings",
          "description": "Get the Airbnb´s that are most commonly booked.",
          "parameters": {
              "type": "object",
              "properties": {
                  "nr_of_listings": {
                      "type": "integer",
                      "description": "The number of listings, e.g. 3"
                  }
              },
              "required": ["nr_of_listings"]
          }
        },    
        {
          "name": "get_listing_by_price",
          "description": "Locate Airbnb rentals available at a specified price point in US dollars.",
          "parameters": {
              "type": "object",
              "properties": {
                  "price": {
                      "type": "integer",
                      "description": "The price of an airbnb per night, e.g. 90 dollars"
                  }
              },
              "required": ["price"]
          }
        },
        {
          "name": "get_listing_by_lower_price",
          "description": "Get the Airbnb properties priced at or below the specified amount in US dollars.",
          "parameters": {
              "type": "object",
              "properties": {
                  "price": {
                      "type": "integer",
                      "description": "The price of an airbnb per night, e.g. 90 dollars"
                  }
              },
              "required": ["price"]
          }
        },
        {
          "name": "get_neighbourhood_group",
          "description": "Get the local community association for a particular Airbnb listing",
          "parameters": {
              "type": "object",
              "properties": {
                  "name": {
                      "type": "string",
                      "description": "The name of the airbnb, e.g. Brooklyn Home in the Heart of it All"
                  }
              },
              "required": ["name"]
          }
        },
        {
          "name": "get_restaurants_by_cuisine",
          "description": " Get some places that serve a particular type of cuisine",
          "parameters": {
              "type": "object",
              "properties": {
                  "cuisine": {
                      "type": "string",
                      "description": "The cuisine type, e.g. Japanese"
                  }
              },
              "required": ["cuisine"]
          }
        },
        {
          "name": "get_borough_location",
          "description": "Determine the district where a particular restaurant is situated.",
          "parameters": {
              "type": "object",
              "properties": {
                  "restaurant": {
                      "type": "string",
                      "description": "The restaurant name, e.g. Junoon"
                  }
              },
              "required": ["restaurant"]
          }
        },
        {
          "name": "get_cuisine",
          "description": "Identify the culinary style or category of food that a certain dining establishment specializes in.",
          "parameters": {
              "type": "object",
              "properties": {
                  "restaurant": {
                      "type": "string",
                      "description": "The restaurant name, e.g. Junoon"
                  }
              },
              "required": ["restaurant"]
          }
        },
        {
          "name": "get_listing_by_room_type",
          "description": "Search for Airbnb properties that match a specific accommodation category or room configuration.",
          "parameters": {
              "type": "object",
              "properties": {
                  "room_type": {
                      "type": "string",
                      "description": "The room type, e.g. Entire home apt"
                  }
              },
              "required": ["room_type"]
          }
        }          

      ]
    },


    {
      "id": "TRAVEL_FUNC_MULTI_PARAM_SIMPLE_DESC_NO_EX_V01",
      "name": "Functions for Travel Use Case with simple function descriptions and no examples",
      "domain": "Travel",
      "categories": [
        "All Parameters",
        "Without Examples",
        "Simple Description"
      ],
      "num_functions": 10,
      "functions": [
        {
          "name": "get_airbnb_by_price_range_neighbourhood",
          "description": "Get the listing by neighbourhood group between a specific price range in US dollars",
          "parameters": {
              "type": "object",
              "properties": {
                  "min_price": {
                      "type": "string",
                      "description": "The min price in the range"
                  },
                  "max_price": {
                      "type": "string",
                      "description": "The maximum price in the range"
                  },                
                  "neighbourhood_group": {
                      "type": "string",
                      "description": "The name of the neighbourhood group, e.g. Brooklyn"
                  }
              },
              "required": ["min_price","max_price","neighbourhood_group"]
          }
        },
        {
            "name": "get_airbnb_by_price_min_nights_and_neighborhood_group",
            "description": "Get the listing by minimum price in US dollars, minimum nights and and a specific neighbourhood group",
            "parameters": {
                "type": "object",
                "properties": {
                    "price": {
                        "type": "integer",
                        "description": "The price of an airbnb per night, e.g. 90 dollars"
                    },
                    "min_nights": {
                        "type": "integer",
                        "description": "The minimum amount of nights, e.g. 2"
                    },                
                    "neighbourhood_group": {
                        "type": "string",
                        "description": "The name of the neighbourhood group, e.g. Brooklyn"
                    }
                },
                "required": ["price","min_nights","neighbourhood_group"]
            }
        }, 
        {
            "name": "get_airbnb_by_neighbourhood_group_room_type_date",
            "description": "Get the listing by neighbourhood group, room type and last review date in the format DD-YY-MM",
            "parameters": {
                "type": "object",
                "properties": {
                    "room_type": {
                        "type": "string",
                        "description": "The type of room of an airbnb, e.g. private room"
                    },
                    "last_review_date": {
                        "type": "string",
                        "description": "The date when the last review was recorded, e.g. 23-09-2019"
                    },                
                    "neighbourhood_group": {
                        "type": "string",
                        "description": "The name of the neighbourhood group, e.g. Brooklyn"
                    }
                },
                "required": ["room_type","last_review_date","neighbourhood_group"]
            }
        },
        {
            "name": "get_airbnb_by_price_range_neighbourhood",
            "description": "Get the listing by neighbourhood group between a specific price range in US dollars",
            "parameters": {
                "type": "object",
                "properties": {
                    "min_price": {
                        "type": "string",
                        "description": "The min price in the range"
                    },
                    "max_price": {
                        "type": "string",
                        "description": "The maximum price in the range"
                    },                
                    "neighbourhood_group": {
                        "type": "string",
                        "description": "The name of the neighbourhood group, e.g. Brooklyn"
                    }
                },
                "required": ["min_price","max_price","neighbourhood_group"]
            }
        }, 
        {
            "name": "get_x_most_popular_places_in_neighbourhood_group_room_type",
            "description": "Get the x most popular airbnbs in a neighbourhood group and for a specific room type ",
            "parameters": {
                "type": "object",
                "properties": {
                    "popularity": {
                        "type": "integer",
                        "description": "The number of airbnbs to output"
                    },
                    "neighbourhood_group": {
                        "type": "string",
                        "description": "The name of the neighbourhood group, e.g. Brooklyn"
                    },                
                    "room_type": {
                        "type": "string",
                        "description": "The type of the room, e.g. Shared Room"
                    }
                },
                "required": ["popularity","neighbourhood_group","room_type"]
            }
        },
           
        {
            "name": "get_avg_by_neighbourgood_group_and_room_type",
            "description": "Get the average price in US dollars of a neighbourhood group by room type ",
            "parameters": {
                "type": "object",
                "properties": {
                    "neighbourhood_group": {
                        "type": "string",
                        "description": "The name of the neighbourhood group, e.g. Brooklyn"
                    },                
                    "room_type": {
                        "type": "string",
                        "description": "The type of the room, e.g. Shared Room"
                    }
                },
                "required": ["neighbourhood_group","room_type"]
            }
        },

        {
            "name": "get_min_cost_by_neighbourhood_group_room_type_min_nights",
            "description": "Get the least costly in US dollars airbnbs for a specific neighbourhood group,room type and minimum nights",
            "parameters": {
                "type": "object",
                "properties": {
                    "nr_requests": {
                        "type": "integer",
                        "description": "The number of airbnbs to output"
                    },
                    "neighbourhood_group": {
                        "type": "string",
                        "description": "The name of the neighbourhood group, e.g. Brooklyn"
                    },                
                    "room_type": {
                        "type": "string",
                        "description": "The type of the room, e.g. Shared Room"
                    },
                    "min_nights": {
                        "type": "string",
                        "description": "The minimum number of nights to stay"
                    }            
                },
                "required": ["nr_requests","neighbourhood_group","room_type","min_nights"]
            }
        },   

        {
            "name": "get_telephone_number_by_name_neighbourhood_group_cuisine",
            "description": "Get the telephone number of a restaurant given the neighbourhood group or cuisine",
            "parameters": {
                "type": "object",
                "properties": {
                    "restaurant": {
                        "type": "string",
                        "description": "The name of the restaurant"
                    },
                    "neighbourhood_group": {
                        "type": "string",
                        "description": "The name of the borough"
                    }, 
                    "cuisine": {
                        "type": "string",
                        "description": "The cuisine of the restaurant e.g. Japanese"
                    }
                },
                "required": ["restaurant","neighbourhood_group","cuisine"]
            }
        },

        {
            "name": "get_restaurant_by_zipcode_cuisine_borough_phone",
            "description": "Get the restaurant info by zip code, cuisine, borough and phone number",
            "parameters": {
                "type": "object",
                "properties": {
                    "zip_code": {
                        "type": "integer",
                        "description": "The zip code of the restaurant"
                    },
                    "cuisine": {
                        "type": "string",
                        "description": "The cuisine of the restaurant e.g. Japanese"
                    }, 
                    "borough": {
                        "type": "string",
                        "description": "The borough of the restaurant e.g. Bronx"
                    }, 
                    "phone": {
                        "type": "string",
                        "description": "The phone number of the restaurant"
                    }          
                },
                "required": ["zip_code","cuisine","borough","phone"]
            }
        }, 

        {
            "name": "get_info_by_name_cuisine_borough_phone",
            "description": "Get the information of a restaurant (street, building and zip code)" ,
            "parameters": {
                "type": "object",
                "properties": {
                    "restaurant": {
                        "type": "string",
                        "description": "The name of the restaurant"
                    },
                    "cuisine": {
                        "type": "string",
                        "description": "The cuisine of the restaurant e.g. Japanese"
                    }, 
                    "borough": {
                        "type": "string",
                        "description": "The borough of the restaurant e.g. Bronx"
                    }, 
                    "phone": {
                        "type": "string",
                        "description": "The phone number of the restaurant"
                    }                
                },
                "required": ["restaurant","cuisine","borough","phone"]
            }
        }   
      
      ]
    },

    {
      "id": "TRAVEL_FUNC_MULTI_CALL_SEQUENTIAL_SIMPLE_DESC_NO_EX_V01",
      "name": "Functions for Travel Use Case with simple function descriptions, multiple calls and no examples",
      "domain": "Travel",
      "categories": [
        "All Parameters",
        "Multi-call",
        "Without Examples",
        "Simple Description"
      ],
      "num_functions": 11,
      "functions": [
        {
          "name": "get_airbnb_by_price_min_nights_and_neighborhood_group",
          "description": "Get the listing by minimum price in US dollars, minimum nights and and a specific neighbourhood group",
          "parameters": {
              "type": "object",
              "properties": {
                  "price": {
                      "type": "integer",
                      "description": "The price of an airbnb per night, e.g. 90 dollars"
                  },
                  "min_nights": {
                      "type": "integer",
                      "description": "The minimum amount of nights, e.g. 2"
                  },                
                  "neighbourhood_group": {
                      "type": "string",
                      "description": "The name of the neighbourhood group, e.g. Brooklyn"
                  }
              },
              "required": ["price","min_nights","neighbourhood_group"]
          }
        },   
        {
          "name": "get_long_lat_by_name_street",
          "description": "Get the latitude and longitude of a restaurant by street",
          "parameters": {
              "type": "object",
              "properties": {
                  "restaurant": {
                      "type": "string",
                      "description": "The name of the restaurant"
                  },
                  "street": {
                      "type": "string",
                      "description": "The street where the restaurant is located"
                  }             
              },
              "required": ["restaurant", "street"]
          }
        },
        {
          "name": "get_airbnb_by_lat_long",
          "description": "Get the airbnb by latitude and longitude",
          "parameters": {
              "type": "object",
              "properties": {
                  "latitude": {
                      "type": "string",
                      "description": "The latitude of the airbnb"
                  },
                  "longitude": {
                      "type": "string",
                      "description": "The longitude of the airbnb"
                  }               
              },
              "required": ["latitude", "longitude"]
          }
        },   
        {
          "name": "get_long_lat_by_airbnb",
          "description": "Get the airbnb by latitude and longitude",
          "parameters": {
              "type": "object",
              "properties": {
                  "listing": {
                      "type": "string",
                      "description": "The airbnb's name"
                  }             
              },
              "required": ["listing"]
          }
        },
        {
          "name": "get_airbnb_address_by_lat_long",
          "description": "Get the airbnb address from longitude and latitude",
          "parameters": {
              "type": "object",
              "properties": {
                  "latitude": {
                      "type": "string",
                      "description": "The restaurant's latitude"
                  },  
                  "longitude": {
                      "type": "string",
                      "description": "The restaurant's longitude"
                  }               
              },
              "required": ["latitude","longitude"]
          }
       },
       {
          "name": "get_restaurant_by_airbnb_closeness",
          "description": "Get the restaurant close to an airbnb",
          "parameters": {
              "type": "object",
              "properties": {
                  "latitude": {
                      "type": "string",
                      "description": "The airbnb's latitude"
                  },  
                  "longitude": {
                      "type": "string",
                      "description": "The airbnb's longitude"
                  }                
              },
              "required": ["latitude","longitude"]
          }
        },
        {
          "name": "get_info_restaurant_with_zipcode_street_building",
          "description": "Get the restaurant info (zipcode,street and building)",
          "parameters": {
              "type": "object",
              "properties": {
                  "latitude": {
                      "type": "string",
                      "description": "The airbnb's latitude"
                  },  
                  "longitude": {
                      "type": "string",
                      "description": "The airbnb's longitude"
                  }                 
              },
              "required": ["latitude","longitude"]
          }
        },
        {
          "name": "get_restaurants_by_ratings",
          "description": "Get the restaurants according to a specific rating",
          "parameters": {
              "type": "object",
              "properties": {
                  "rating": {
                      "type": "string",
                      "description": "The rating of the restaurant"
                  }                 
              },
              "required": ["rating"]
          }
        },
        {
          "name": "get_neighborhood_by_rest_specification",
          "description": "Get the restaurants according to a specific neighborhood",
          "parameters": {
              "type": "object",
              "properties": {
                  "restaurants": {
                      "type": "string",
                      "description": "The list of restaurant name"
                  },  
                  "neigborhood": {
                      "type": "string",
                      "description": "The neighborhood of a restaurant"
                  }              
              },
              "required": ["restaurants","neigborhood"]
          }
        },
        {
          "name": "get_airbnb_with_max_reviews",
          "description": "Get the airbnbs with max number of reviews at a specific neighborhood group and room type",
          "parameters": {
              "type": "object",
              "properties": {
                  "popularity": {
                      "type": "int",
                      "description": "The number of airbnbs to show"
                  },  
                  "neighbourhood_group": {
                      "type": "string",
                      "description": "The neighborhood of an airbnb"
                  }, 
                  "room_type": {
                      "type": "string",
                      "description": "The type of room of an airbnb"
                  }              
              },
              "required": ["popularity","neigborhood_group","room_type"]
          }
        },
        {
          "name": "get_restaurant_long_lat_by_zipcode_cuisine_borough_phone",
          "description": "Get the restaurant info and latitude and longitude by zip code, cuisine, borough and phone number",
          "parameters": {
              "type": "object",
              "properties": {
                  "zip_code": {
                      "type": "number",
                      "description": "The zip code of the restaurant"
                  },
                  "cuisine": {
                      "type": "string",
                      "description": "The cuisine of the restaurant e.g. Japanese"
                  }, 
                  "borough": {
                      "type": "string",
                      "description": "The borough of the restaurant e.g. Bronx"
                  }, 
                  "phone": {
                      "type": "string",
                      "description": "The phone number of the restaurant"
                  }                
              },
              "required": ["zip_code","cuisine","borough","phone"]
          }
        }      
      ]
    },
    {
      "id": "TRAVEL_FUNC_MULTI_CALL_PARALLEL_SIMPLE_DESC_NO_EX_V01",
      "name": "Functions for Travel Use Case with simple function descriptions, multiple calls and no examples",
      "domain": "Travel",
      "categories": [
        "All Parameters",
        "Multi-call",
        "Without Examples",
        "Simple Description"
      ],
      "num_functions": 7,
      "functions": [ 
        {
          "name": "get_avg_prep_time_by_restaurant_name",
          "description": "Get average prep time of a restaurant",
          "parameters": {
              "type": "object",
              "properties": {
                  "restaurant_name": {
                      "type": "string",
                      "description": "The restaurant name"
                  }
              },
              "required": ["restaurant_name"]
          }
        },
        {
          "name": "get_avg_costs_by_restaurant_name",
          "description": "Get average costs of a restaurant in US dollars",
          "parameters": {
              "type": "object",
              "properties": {
                  "restaurant_name": {
                      "type": "string",
                      "description": "The restaurant name"
                  }
              },
              "required": ["restaurant_name"]
          }
       },
       {
          "name": "get_rating_by_restaurant_name",
          "description": "Get rating by restaurant name",
          "parameters": {
              "type": "object",
              "properties": {
                  "restaurant_name": {
                      "type": "string",
                      "description": "The restaurant name"
                  }
              },
              "required": ["restaurant_name"]
          }
        },
        {
          "name": "get_avg_delivery_time_by_restaurant_name",
          "description": "Get average delivery time of a restaurant",
          "parameters": {
              "type": "object",
              "properties": {
                  "restaurant_name": {
                      "type": "string",
                      "description": "The restaurant name"
                  }
              },
              "required": ["restaurant_name"]
          }
        },
        {
          "name": "get_restaurant_by_cuisine_borough",
          "description": "Get restaurant by borough and cuisine",
          "parameters": {
              "type": "object",
              "properties": {
                  "borough": {
                      "type": "string",
                      "description": "The borough, e.g. Manhattan"
                  },
                  "cuisine": {
                      "type": "string",
                      "description": "The cuisine type of the restaurant, e.g Italian"
                  }
              },
              "required": ["borough", "cuisine"]
          }
       },
       {
          "name": "get_neighbourhood_group",
          "description": "Get the neighbourhood group of a specific airbnb",
          "parameters": {
              "type": "object",
              "properties": {
                  "name": {
                      "type": "string",
                      "description": "The name of the airbnb, e.g. Brooklyn Home in the Heart of it All"
                  }
              },
              "required": ["name"]
          }
       },
       {
          "name": "get_ratings_per_cuisines",
          "description": "Get restaurant by borough and cuisine",
          "parameters": {
              "type": "object",
              "properties": {
                  "cuisines": {
                      "type": "string",
                      "description": "The cuisine type, e.g Italian"
                  }
              },
              "required": ["cuisines"]
          }
       }             
      
      ]
    },

    {
      "id": "MUSIC_FUNC_ONE_PARAM_SIMPLE_DESC_NO_EX_V01",
      "name": "Music - 1 parameter functions with simple function description, no examples.",
      "domain": "Music",
      "categories": ["1 Parameter", "Without Examples", "Simple Description"],
      "num_functions": 10,
      "functions": [
        {
          "name": "albums_by_artist_1",
          "description": "Returns all albums by a given artist.",
          "parameters": {
            "type": "object",
            "properties": {
              "artist_name": {
                "type": "string",
                "description": "The name of the artist."
              }
            },
            "required": ["artist_name"]
          }
        },
        {
          "name": "top_rated_albums",
          "description": "Returns the top-rated albums based on average rating.",
          "parameters": {
            "type": "object",
            "properties": {
              "n": {
                "type": "number",
                "description": "The number of albums to return. Default is 10."
              }
            },
            "required": []
          }
        },
        {
          "name": "artist_by_album",
          "description": "Returns the artist of an album by its name.",
          "parameters": {
            "type": "object",
            "properties": {
              "album_name": {
                "type": "string",
                "description": "The name of the album."
              }
            },
            "required": ["album_name"]
          }
        },
        {
          "name": "albums_by_genres",
          "description": "Retrieves a list of albums that contain any of the specified genres.",
          "parameters": {
            "type": "object",
            "properties": {
              "genres": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "A list of genre strings the albums must contain."
              }
            },
            "required": ["genres"]
          }
        },
        {
          "name": "albums_by_release_date_1",
          "description": "Retrieves all albums released on a specific date.",
          "parameters": {
            "type": "object",
            "properties": {
              "release_date": {
                "type": "string",
                "description": "The release date to filter albums by. Can be in YYYY (year), YYYY-MM (year-month), or YYYY-MM-DD (specific date) format."
              }
            },
            "required": ["release_date"]
          }
        },
        {
          "name": "top_streamed_songs",
          "description": "Returns the n most streamed songs.",
          "parameters": {
            "type": "object",
            "properties": {
              "n": {
                "type": "number",
                "description": "The number of top-streamed songs to return. Default is 10."
              }
            },
            "required": []
          }
        },
        {
          "name": "songs_by_release_date",
          "description": "Retrieves all songs released on a specific date, in a specific month, or in a specific year, based on the provided release date.",
          "parameters": {
            "type": "object",
            "properties": {
              "release_date": {
                "type": "string",
                "description": "The release date to filter songs by. Can be in YYYY (year), YYYY-MM (year-month), or YYYY-MM-DD (specific date) format."
              }
            },
            "required": ["release_date"]
          }
        },
        {
          "name": "songs_by_longest_duration",
          "description": "Returns the top 'n' songs sorted by their duration, from longest to shortest.",
          "parameters": {
            "type": "object",
            "properties": {
              "n": {
                "type": "number",
                "description": "The number of top songs to return, based on duration. Defaults to 10 if not specified."
              }
            },
            "required": []
          }
        },
        {
          "name": "artist_by_song",
          "description": "Returns the artist of the song.",
          "parameters": {
            "type": "object",
            "properties": {
              "song_name": {
                "type": "string",
                "description": "The name of the song."
              }
            },
            "required": ["song_name"]
          }
        },
        {
          "name": "songs_by_artist_1",
          "description": "Returns all songs by a given artist.",
          "parameters": {
            "type": "object",
            "properties": {
              "artist_name": {
                "type": "string",
                "description": "The name of the artist."
              }
            },
            "required": ["artist_name"]
          }
        }
      ]
    },
    {
      "id": "MUSIC_FUNC_MULTI_PARAM_SIMPLE_DESC_NO_EX_V01",
      "name": "Music - Multi(>1) parameter functions with simple function description, no examples.",
      "domain": "Music",
      "categories": [
        "Multi Parameters",
        "Without Examples",
        "Simple Description"
      ],
      "num_functions": 16,
      "functions": [
        {
          "name": "filter_albums_by_date_range",
          "description": "Filters and retrieves albums released within a specified date range. The range is inclusive of the start and end dates.",
          "parameters": {
            "type": "object",
            "properties": {
              "start_date": {
                "type": "string",
                "description": "The start date of the date range for filtering albums. Can be in YYYY, YYYY-MM, or YYYY-MM-DD format."
              },
              "end_date": {
                "type": "string",
                "description": "The end date of the date range for filtering albums. Can be in YYYY, YYYY-MM, or YYYY-MM-DD format."
              }
            },
            "required": ["start_date", "end_date"]
          }
        },
        {
          "name": "albums_by_genres2",
          "description": "Retrieves albums that match specified inclusion and exclusion genre criteria.",
          "parameters": {
            "type": "object",
            "properties": {
              "genres_in": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "A list of genre strings the albums must contain."
              },
              "genres_out": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "A list of genre strings the albums must not contain."
              }
            },
            "required": ["genres_in", "genres_out"]
          }
        },
        {
          "name": "albums_by_date_and_genres",
          "description": "Retrieves albums released on a specific date, in a specific month, or in a specific year that match any of the specified genres.",
          "parameters": {
            "type": "object",
            "properties": {
              "release_date": {
                "type": "string",
                "description": "The release date of the albums. Can be in YYYY, YYYY-MM, or YYYY-MM-DD format."
              },
              "genres": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "A list of genre strings to filter albums by."
              }
            },
            "required": ["release_date", "genres"]
          }
        },
        {
          "name": "high_rated_albums",
          "description": "Retrieves albums with an average rating above a specified threshold and a minimum number of ratings.",
          "parameters": {
            "type": "object",
            "properties": {
              "rating_threshold": {
                "type": "number",
                "description": "The minimum average rating for the albums. Defaults to 4.0 if not specified."
              },
              "min_ratings": {
                "type": "number",
                "description": "The minimum number of ratings an album must have. Defaults to 100 if not specified."
              }
            },
            "required": []
          }
        },
        {
          "name": "top_streamed_songs_by_artist",
          "description": "Retrieves the top streamed songs by specific artist, sorted by number of streams.",
          "parameters": {
            "type": "object",
            "properties": {
              "artist_name": {
                "type": "string",
                "description": "The name of the artist."
              },
              "n": {
                "type": "number",
                "description": "The number of top-streamed songs to return. Defaults to 5 if not specified."
              }
            },
            "required": ["artist_name"]
          }
        },
        {
          "name": "songs_by_danceability_explicitness",
          "description": "Retrieves songs that meet a specified danceability threshold and explicitness criteria.",
          "parameters": {
            "type": "object",
            "properties": {
              "danceability_threshold": {
                "type": "number",
                "description": "The minimum danceability rating (percentage) to filter songs by."
              },
              "explicit": {
                "type": "boolean",
                "description": "Flag to filter songs by explicit content. Defaults to True if not specified."
              }
            },
            "required": ["danceability_threshold"]
          }
        },
        {
          "name": "albums_by_year_genres_and_descriptors",
          "description": "Retrieves albums released on a specific date, month, or year, that fit within specified genres and match given descriptors.",
          "parameters": {
            "type": "object",
            "properties": {
              "release_date": {
                "type": "string",
                "description": "Release date to filter albums by, in YYYY, YYYY-MM, or YYYY-MM-DD format."
              },
              "genres": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List of genres to filter albums by."
              },
              "descriptors": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List of descriptors to match albums with."
              }
            },
            "required": ["release_date", "genres", "descriptors"]
          }
        },
        {
          "name": "high_rated_reviewed_albums",
          "description": "Retrieves albums that meet specific criteria of high average ratings, a minimum number of ratings, and a minimum number of reviews.",
          "parameters": {
            "type": "object",
            "properties": {
              "rating_threshold": {
                "type": "number",
                "description": "The minimum average rating for the albums."
              },
              "min_ratings": {
                "type": "number",
                "description": "The minimum number of ratings an album must have."
              },
              "review_threshold": {
                "type": "number",
                "description": "The minimum number of reviews an album must have."
              }
            },
            "required": ["rating_threshold", "min_ratings", "review_threshold"]
          }
        },
        {
          "name": "songs_by_danceability_explicitness_speechiness",
          "description": "Retrieves songs based on specified thresholds for danceability, speechiness, and explicit content criteria.",
          "parameters": {
            "type": "object",
            "properties": {
              "danceability_threshold": {
                "type": "number",
                "description": "The minimum danceability rating (percentage) to filter songs by."
              },
              "speechiness_threshold": {
                "type": "number",
                "description": "The minimum speechiness rating (percentage) to filter songs by."
              },
              "explicit": {
                "type": "boolean",
                "description": "Flag to filter songs by explicit content. Defaults to True if not specified."
              }
            },
            "required": ["danceability_threshold", "speechiness_threshold"]
          }
        },
        {
          "name": "top_streamed_songs_by_artist_date",
          "description": "Retrieves the top streamed songs by a specific artist, released on a given date, month, or year.",
          "parameters": {
            "type": "object",
            "properties": {
              "artist_name": {
                "type": "string",
                "description": "The name of the artist whose songs are to be retrieved."
              },
              "release_date": {
                "type": "string",
                "description": "The release date of the songs to filter by, in YYYY, YYYY-MM, or YYYY-MM-DD format."
              },
              "n": {
                "type": "number",
                "description": "The number of top-streamed songs to return. Defaults to 5 if not specified."
              }
            },
            "required": ["artist_name", "release_date"]
          }
        },
        {
          "name": "unique_albums",
          "description": "Finds albums that are distinctive in terms of genre diversity and artist collaboration but have lower average ratings.",
          "parameters": {
            "type": "object",
            "properties": {
              "genres_threshold": {
                "type": "number",
                "description": "The minimum number of genres an album must cover."
              },
              "artist_count_threshold": {
                "type": "number",
                "description": "The minimum number of artists required to be involved in an album."
              },
              "max_rating_threshold": {
                "type": "number",
                "description": "The maximum average rating that an album can have."
              }
            },
            "required": [
              "genres_threshold",
              "artist_count_threshold",
              "max_rating_threshold"
            ]
          }
        },
        {
          "name": "albums_by_dates_genres_rating",
          "description": "Retrieves albums released within a specific date range, filtered by genres to include and exclude, and having an average rating above a specified minimum threshold.",
          "parameters": {
            "type": "object",
            "properties": {
              "start_date": {
                "type": "string",
                "description": "The start date of the date range for filtering albums, in YYYY-MM-DD format."
              },
              "end_date": {
                "type": "string",
                "description": "The end date of the date range for filtering albums, in YYYY-MM-DD format."
              },
              "genre_in": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List of genres that the albums must include."
              },
              "genre_out": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List of genres that the albums must not include."
              },
              "min_rating": {
                "type": "number",
                "description": "The minimum average rating threshold for the albums."
              }
            },
            "required": [
              "start_date",
              "end_date",
              "genre_in",
              "genre_out",
              "min_rating"
            ]
          }
        },
        {
          "name": "high_rated_reviewed_albums_by_date",
          "description": "Retrieves albums that exceed a certain rating threshold, have a minimum number of ratings and reviews, and are released on a specified date.",
          "parameters": {
            "type": "object",
            "properties": {
              "rating_threshold": {
                "type": "number",
                "description": "The minimum average rating for the albums."
              },
              "min_ratings": {
                "type": "number",
                "description": "The minimum number of ratings an album must have."
              },
              "review_threshold": {
                "type": "number",
                "description": "The minimum number of reviews an album must have."
              },
              "release_date": {
                "type": "string",
                "description": "The release date of the albums, in YYYY, YYYY-MM, or YYYY-MM-DD format."
              }
            },
            "required": [
              "rating_threshold",
              "min_ratings",
              "review_threshold",
              "release_date"
            ]
          }
        },
        {
          "name": "top_streamed_songs_by_artist_date_range",
          "description": "Finds the top streamed songs by a specific artist within a given date range, and returns a specified number of these top songs.",
          "parameters": {
            "type": "object",
            "properties": {
              "artist_name": {
                "type": "string",
                "description": "The name of the artist whose songs are to be retrieved."
              },
              "start_date": {
                "type": "string",
                "description": "The start date of the date range for filtering songs, in YYYY-MM-DD format."
              },
              "end_date": {
                "type": "string",
                "description": "The end date of the date range for filtering songs, in YYYY-MM-DD format."
              },
              "n": {
                "type": "number",
                "description": "The number of top-streamed songs to return. Defaults to 5 if not specified."
              }
            },
            "required": ["artist_name", "start_date", "end_date", "n"]
          }
        },
        {
          "name": "speechiness_songs",
          "description": "Finds songs based on specific criteria of speechiness, energy, explicit content, and BPM, allowing a tolerance range for speechiness and energy values.",
          "parameters": {
            "type": "object",
            "properties": {
              "speechiness": {
                "type": "number",
                "description": "Target threshold for speechiness with an acceptable deviation defined by the threshold."
              },
              "energy": {
                "type": "number",
                "description": "Target threshold for energy with an acceptable deviation defined by the threshold."
              },
              "explicit": {
                "type": "boolean",
                "description": "Flag indicating whether to filter for explicit content."
              },
              "bpm": {
                "type": "number",
                "description": "Target Beats Per Minute (BPM) to filter songs by."
              },
              "threshold": {
                "type": "number",
                "description": "Range value to determine the acceptable deviation from the speechiness and energy thresholds. Defaults to 20 if not specified."
              }
            },
            "required": [
              "speechiness",
              "energy",
              "explicit",
              "bpm",
              "threshold"
            ]
          }
        },
        {
          "name": "instrumental_songs",
          "description": "Identifies songs based on specified levels of instrumentalness, valence, danceability, and BPM, with a tolerance range for each parameter.",
          "parameters": {
            "type": "object",
            "properties": {
              "instrumentalness": {
                "type": "number",
                "description": "Target threshold for instrumentalness, with a specified deviation range."
              },
              "valence": {
                "type": "number",
                "description": "Target threshold for valence, with a specified deviation range."
              },
              "danceability": {
                "type": "number",
                "description": "Target threshold for danceability, with a specified deviation range."
              },
              "bpm": {
                "type": "number",
                "description": "Target Beats Per Minute (BPM) to filter songs by."
              },
              "threshold": {
                "type": "number",
                "description": "Range value to determine the acceptable deviation from the instrumentalness, valence, and danceability thresholds."
              }
            },
            "required": [
              "instrumentalness",
              "valence",
              "danceability",
              "bpm",
              "threshold"
            ]
          }
        }
      ]
    },
    {
      "id": "MUSIC_FUNC_ONE_PARAM_COMPLEX_DESC_NO_EX_V01",
      "name": "Music - 1 parameter functions with complex function description, no examples.",
      "domain": "Music",
      "categories": ["1 Parameter", "Without Examples", "Complex Description"],
      "num_functions": 10,
      "functions": [
        {
          "name": "albums_by_artist_1",
          "description": "Fetches the collection of music releases associated with a specific performer.",
          "parameters": {
            "type": "object",
            "properties": {
              "artist_name": {
                "type": "string",
                "description": "The name of the artist."
              }
            },
            "required": ["artist_name"]
          }
        },
        {
          "name": "top_rated_albums",
          "description": "Retrieves the records of most favoured music releases ranked by their scores.",
          "parameters": {
            "type": "object",
            "properties": {
              "n": {
                "type": "number",
                "description": "The number of albums to return. Default is 10."
              }
            },
            "required": []
          }
        },
        {
          "name": "artist_by_album",
          "description": "Fetches the singer who released a stated collection.",
          "parameters": {
            "type": "object",
            "properties": {
              "album_name": {
                "type": "string",
                "description": "The name of the album."
              }
            },
            "required": ["album_name"]
          }
        },
        {
          "name": "albums_by_genres",
          "description": "Retrieves a list of records that can be classified to be of the specified category/type.",
          "parameters": {
            "type": "object",
            "properties": {
              "genres": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "A list of genre strings the albums must contain."
              }
            },
            "required": ["genres"]
          }
        },
        {
          "name": "albums_by_release_date_1",
          "description": "Retrieves all collections launched during a particular timeframe.",
          "parameters": {
            "type": "object",
            "properties": {
              "release_date": {
                "type": "string",
                "description": "The release date to filter albums by. Can be in YYYY (year), YYYY-MM (year-month), or YYYY-MM-DD (specific date) format."
              }
            },
            "required": ["release_date"]
          }
        },
        {
          "name": "top_streamed_songs",
          "description": "Retrieves the trendy tracks which the vast majority has been influenced by",
          "parameters": {
            "type": "object",
            "properties": {
              "n": {
                "type": "number",
                "description": "The number of top-streamed songs to return. Default is 10."
              }
            },
            "required": []
          }
        },
        {
          "name": "songs_by_release_date",
          "description": "Retrieves all musical pieces launched during a particular timeframe.",
          "parameters": {
            "type": "object",
            "properties": {
              "release_date": {
                "type": "string",
                "description": "The release date to filter songs by. Can be in YYYY (year), YYYY-MM (year-month), or YYYY-MM-DD (specific date) format."
              }
            },
            "required": ["release_date"]
          }
        },
        {
          "name": "songs_by_longest_duration",
          "description": "Retrieves the n highest-ranking tunes arranged by their length.",
          "parameters": {
            "type": "object",
            "properties": {
              "n": {
                "type": "number",
                "description": "The number of top songs to return, based on duration. Defaults to 10 if not specified."
              }
            },
            "required": []
          }
        },
        {
          "name": "artist_by_song",
          "description": "Fetches the performer who released a stated track.",
          "parameters": {
            "type": "object",
            "properties": {
              "song_name": {
                "type": "string",
                "description": "The name of the song."
              }
            },
            "required": ["song_name"]
          }
        },
        {
          "name": "songs_by_artist_1",
          "description": "Retrieves the music recordings that have been released by the specified singer.",
          "parameters": {
            "type": "object",
            "properties": {
              "artist_name": {
                "type": "string",
                "description": "The name of the artist."
              }
            },
            "required": ["artist_name"]
          }
        }
      ]
    },
    {
      "id": "MUSIC_FUNC_COMPLEX_DESC_NO_EX_V2",
      "name": "Music - one and multi parameter functions with elaborative function description, no examples.",
      "domain": "Music",
      "categories": [
        "1 Parameter",
        "Multiple Parameter",
        "Without Examples",
        "Complex Description"
      ],
      "num_functions": 11,
      "functions": [
        {
          "name": "artist_info",
          "description": "Retrieves detailed information for a specified artist, including attributes like name, band status, formation/birth date, city, country, genres, and related artists.",
          "parameters": {
            "type": "object",
            "properties": {
              "artist_name": {
                "type": "string",
                "description": "The name of the artist. Matches against the 'Name' column in the ARTIST_SQL dataset."
              }
            },
            "required": ["artist_name"]
          }
        },
        {
          "name": "album_info",
          "description": "Fetches detailed information about a specific album, covering attributes such as album name, artist name, release date, genres, descriptors, average rating, rating count, and review count.",
          "parameters": {
            "type": "object",
            "properties": {
              "album_name": {
                "type": "string",
                "description": "The name of the album. Matches against the 'release_name' column in the ALBUMS_SQL dataset."
              }
            },
            "required": ["album_name"]
          }
        },
        {
          "name": "song_info",
          "description": "Provides detailed information on a specific song, including track name, artist(s) name, album name, artist count, release date, streams, BPM, key, mode, danceability, valence, energy, acousticness, instrumentalness, liveness, speechiness, and duration in minutes.",
          "parameters": {
            "type": "object",
            "properties": {
              "song_name": {
                "type": "string",
                "description": "The name of the song. Matches against the 'track_name' column in the SONGS_SQL dataset."
              }
            },
            "required": ["song_name"]
          }
        },
        {
          "name": "albums_by_artist_2",
          "description": "Retrieves all albums by a specific artist, searching through the 'artist_name' column in the ALBUMS_SQL dataset. It includes album name, artist name, release date, genres, descriptors, average rating, rating count, and review count.",
          "parameters": {
            "type": "object",
            "properties": {
              "artist_name": {
                "type": "string",
                "description": "The artist's name to search albums for. The search is performed within the 'artist_name' column, supporting partial matches."
              }
            },
            "required": ["artist_name"]
          }
        },
        {
          "name": "artists_by_genres",
          "description": "Finds artists that match any of the specified genres, utilizing the 'genres' column in the ARTIST_SQL dataset. It covers artist's name, is_band status, formation/birth date, city, country, genres, and related artists.",
          "parameters": {
            "type": "object",
            "properties": {
              "genres": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List of genre strings to filter artists by. The filtering checks the 'genres' column for any matches."
              }
            },
            "required": ["genres"]
          }
        },
        {
          "name": "songs_by_album",
          "description": "Retrieves all songs from a specific album, including details such as track name, artist(s) name, album name, artist count, release date, streams, and various musical and acoustic properties like BPM, danceability, and duration in minutes.",
          "parameters": {
            "type": "object",
            "properties": {
              "album_name": {
                "type": "string",
                "description": "The name of the album to find songs for. Matches against the 'album_name' column in the SONGS_SQL dataset."
              }
            },
            "required": ["album_name"]
          }
        },
        {
          "name": "max_rating_given_albums",
          "description": "Finds the highest average rating from a list of specified albums. Returns the maximum average rating and the names of albums that share this rating. Relies on 'release_name' for album identification and 'avg_rating' for evaluation.",
          "parameters": {
            "type": "object",
            "properties": {
              "albums": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "A list of album names to evaluate. The function searches the 'release_name' column in the ALBUMS_SQL dataset."
              }
            },
            "required": ["albums"]
          }
        },
        {
          "name": "sum_streams_given_songs",
          "description": "Calculates the total number of streams for a specified list of songs. Accepts either a list of song names or a single comma-separated string of song names. Utilizes the 'track_name' for song identification and 'streams' for summing.",
          "parameters": {
            "type": "object",
            "properties": {
              "songs": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "A list of song names, or a single string of comma-separated song names, to calculate total streams for. Matches against the 'track_name' column in the SONGS_SQL dataset."
              }
            },
            "required": ["songs"]
          }
        },
        {
          "name": "highest_rated_albums",
          "description": "Retrieves albums that have an average rating above a specified threshold and a minimum number of ratings. Filters based on 'avg_rating' and 'rating_count' columns, providing detailed album information.",
          "parameters": {
            "type": "object",
            "properties": {
              "rating_threshold": {
                "type": "number",
                "default": 4.0,
                "description": "The minimum average rating albums must meet to be included. Searches the 'avg_rating' column in the ALBUMS_SQL dataset."
              },
              "min_ratings": {
                "type": "number",
                "default": 100,
                "description": "The minimum number of ratings an album must have to be considered. Filters using the 'rating_count' column."
              }
            },
            "required": []
          }
        },
        {
          "name": "albums_by_release_date_2",
          "description": "Retrieves all albums released on a specific date, in a specific month, or in a specific year, based on the provided release date, searching through the 'release_date' column in the ALBUMS_SQL dataset. It includes album name, artist name, release date, genres, descriptors, average rating, rating count, and review count.",
          "parameters": {
            "type": "object",
            "properties": {
              "release_date": {
                "type": "string",
                "description": "The release date to filter albums by. Can be in YYYY (year), YYYY-MM (year-month), or YYYY-MM-DD (specific date) format."
              }
            },
            "required": ["release_date"]
          }
        },
        {
          "name": "songs_by_artist_2",
          "description": "Retrieves all songs by a specific artist, searching through the 'artist(s)_name' column in the SONGS_SQL dataset,  including details such as track name, artist(s) name, album name, artist count, release date, streams, and various musical and acoustic properties like BPM, danceability, and duration in minutes.",
          "parameters": {
            "type": "object",
            "properties": {
              "artist_name": {
                "type": "string",
                "description": "The artist's name to search songs for. The search is performed within the 'artist(s)_name' column, supporting partial matches."
              }
            },
            "required": ["artist_name"]
          }
        }
      ]
    }
  ]
}
